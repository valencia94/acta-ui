name: Deploy UI to S3 + CloudFront

on:
  push:
    branches: [ develope ]   # change if your prod branch is develop

permissions:
  id-token: write        # for OIDC
  contents: read

env:
  BUILD_DIR: dist

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout source
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Wallet-less AWS login via GitHub OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ vars.AWS_REGION }}

      # 3) Install deps & build with pnpm
      - name: Build Vite app
        run: |
          corepack enable
          pnpm install --frozen-lockfile
          pnpm run build

      # 4) Ensure bucket exists (idempotent)
      - name: Create/verify S3 bucket
        run: |
          aws s3api head-bucket --bucket ${{ vars.BUCKET_NAME }} 2>/dev/null || \
          aws s3api create-bucket \
                --bucket ${{ vars.BUCKET_NAME }} \
                --region ${{ vars.AWS_REGION }} \
                --create-bucket-configuration LocationConstraint=${{ vars.AWS_REGION }}
          aws s3 website s3://${{ vars.BUCKET_NAME }} --index-document index.html || true

      # 5) Sync build to S3
      - name: Upload static site
        run: aws s3 sync $BUILD_DIR s3://${{ vars.BUCKET_NAME }} --delete

      # 6) Create (first run) or reuse CloudFront distro
      - name: Ensure CloudFront distribution
        id: cfdist
        run: |
          if [ -z "${{ vars.CLOUDFRONT_DIST_ID }}" ]; then
            DIST_ID=$(aws cloudfront create-distribution \
              --origin-domain-name ${{ vars.BUCKET_NAME }}.s3.${{ vars.AWS_REGION }}.amazonaws.com \
              --default-root-object index.html \
              --query 'Distribution.Id' --output text)
            echo "distid=$DIST_ID" >> $GITHUB_OUTPUT
          else
            echo "distid=${{ vars.CLOUDFRONT_DIST_ID }}" >> $GITHUB_OUTPUT
          fi

      # 7) Invalidate cache so users get the latest bundle
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cfdist.outputs.distid }} \
            --paths "/*"

      # 8) Output frontend URL
      - name: Show site URL
        run: echo "ðŸš€ Deployed: https://$(aws cloudfront get-distribution \
              --id ${{ steps.cfdist.outputs.distid }} \
              --query 'Distribution.DomainName' --output text)"

