# .github/workflows/build_deploy_with_backend.yml
name: 🚀 Build, Deploy Frontend + Backend

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy simplified backend (Lambda-centric)'
        required: true
        default: true
        type: boolean
      test_backend_endpoints:
        description: 'Test backend endpoints after deployment'
        required: true
        default: true
        type: boolean

jobs:
  ci_deploy:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
      # ─── 0. Checkout ─────────────────────────────────────────
      - uses: actions/checkout@v4

      # ─── 1. Node & pnpm toolchain ───────────────────────────
      - uses: pnpm/action-setup@v2
        with: { version: 9 }

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      # ─── 2. Install, Format, Test ───────────────────────────
      - run: pnpm install --frozen-lockfile

      - name: 🧼 Prettier Format (Auto-Fix)
        run: pnpm exec prettier --write .

      - name: 🧼 Lint auto-fix
        run: pnpm exec eslint . --fix

      - name: 🔍 Re-run lint to validate
        run: pnpm exec eslint .

      - name: 🧪 Lint + TypeScript
        run: pnpm lint

      - name: ✅ Vitest Unit Tests
        run: pnpm run test:vitest -- --run --passWithNoTests

      # ─── 3. Build (Vite) ─────────────────────────────────────
      - name: 🔨 Build UI
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> "$GITHUB_ENV"
          pnpm run build

      - name: 📂 List dist/ before upload
        run: ls -R dist

      # ─── 4. Local Preview Smoke Test ─────────────────────────
      - name: 🌐 Local preview smoke test
        run: |
          pnpm exec vite preview --port 4173 --strictPort & SERVER=$!
          sleep 5 && curl -sf http://localhost:4173/
          kill $SERVER

      # ─── 5. AWS Auth ─────────────────────────────────────────
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ─── 5.5. ENHANCED: Deploy Simplified Backend ───────────
      - name: 🎯 Deploy Simplified Backend (Lambda-Centric)
        if: ${{ inputs.deploy_backend || github.event_name == 'push' }}
        run: |
          echo "🎯 Deploying Simplified Backend (Lambda-Centric)"
          echo "==============================================="
          echo "🔧 Strategy: Route all PM endpoints to existing projectMetadataEnricher"
          echo "💰 Benefits: No new Lambda functions, no DynamoDB costs, faster responses"
          echo
          
          # Deploy CloudFormation stack
          echo "📦 Deploying CloudFormation stack..."
          aws cloudformation deploy \
            --template-file infra/template-simplified-lambda.yaml \
            --stack-name acta-simplified-backend \
            --parameter-overrides \
              ExistingApiId=q2b9avfwv5 \
              ExistingApiRootResourceId=kw8f8zihjg \
            --capabilities CAPABILITY_IAM \
            --region us-east-2
            
          echo "✅ CloudFormation stack deployed successfully"
          
          # Create API Gateway deployment
          echo "🚀 Creating API Gateway deployment..."
          DEPLOYMENT_ID=$(aws apigateway create-deployment \
            --rest-api-id q2b9avfwv5 \
            --stage-name prod \
            --description "Simplified backend deployment $(date)" \
            --region us-east-2 \
            --query 'id' \
            --output text)
            
          echo "✅ API Gateway deployment created: $DEPLOYMENT_ID"
          echo
          echo "🎯 Simplified Backend Deployment Complete!"
          echo "📋 New Endpoints:"
          echo "  ✅ /pm-projects/all-projects → projectMetadataEnricher"
          echo "  ✅ /pm-projects/{pmEmail} → projectMetadataEnricher"
          echo "  ✅ /projects → projectMetadataEnricher"
          echo "  ✅ /check-document/{projectId} → projectMetadataEnricher"

      # ─── 5.6. Test Backend Endpoints ────────────────────────
      - name: 🧪 Test Backend Endpoints
        if: ${{ inputs.test_backend_endpoints || github.event_name == 'push' }}
        run: |
          echo "🧪 Testing Backend Endpoints"
          echo "============================"
          
          BASE_URL="https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod"
          echo "🔗 Base URL: $BASE_URL"
          echo
          
          # Function to test endpoint
          test_endpoint() {
            local method=$1
            local endpoint=$2
            local description=$3
            
            echo "🔍 Testing: $description"
            echo "   $method $endpoint"
            
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" "$BASE_URL$endpoint" 2>/dev/null || echo "HTTPSTATUS:000")
            status_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
            
            if [ "$status_code" = "200" ]; then
                echo "   ✅ Status: $status_code (Working)"
            elif [ "$status_code" = "403" ]; then
                echo "   ✅ Status: $status_code (Auth Required - Expected for PM endpoints)"
            elif [ "$status_code" = "404" ]; then
                echo "   ❌ Status: $status_code (Not Found - Check deployment)"
            else
                echo "   ⚠️  Status: $status_code"
            fi
            echo
          }
          
          echo "📋 Testing NEW PM Endpoints (routed to projectMetadataEnricher):"
          test_endpoint "GET" "/pm-projects/all-projects" "PM Projects (All)"
          test_endpoint "GET" "/pm-projects/test@example.com" "PM Projects (By Email)"
          test_endpoint "GET" "/projects" "Projects List"
          test_endpoint "GET" "/check-document/test?format=docx" "Document Status (GET)"
          
          echo "📋 Testing EXISTING Endpoints:"
          test_endpoint "GET" "/health" "Health Check"
          test_endpoint "GET" "/project-summary/test" "Project Summary"
          
          echo "✅ Backend endpoint testing completed"

      # ─── 6. Sync to S3 + Push SPA Routes ─────────────────────
      - name: 🚀 Sync dist/ to S3
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          set -eux
          aws s3 sync dist "s3://$BUCKET" --delete
          bash scripts/push-spa-routes.sh

      - name: 🧾 Log current S3 contents
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          echo "✅ Dumping full contents of s3://$BUCKET:"
          aws s3 ls s3://$BUCKET/ --recursive

      # ─── 7. Ensure CF root object = index.html ───────────────
      - name: 🛠️ Set CF root object if needed
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          set -euo pipefail
          tmp=$(mktemp)
          aws cloudfront get-distribution-config --id "$DIST_ID" > "$tmp"
          etag=$(jq -r .ETag "$tmp")
          jq '
            .DistributionConfig as $cfg
            | if $cfg.DefaultRootObject != "index.html"
              then $cfg.DefaultRootObject = "index.html" | $cfg
              else empty end
          ' "$tmp" > /tmp/cf_patch.json
          if [ -s /tmp/cf_patch.json ]; then
            aws cloudfront update-distribution \
              --id "$DIST_ID" \
              --if-match "$etag" \
              --distribution-config file:///tmp/cf_patch.json
            echo "🔄 CF root object set to index.html"
          else
            echo "✅ CF root object already index.html"
          fi
          rm -f "$tmp"

      # ─── 8. OAC Policy ───────────────────────────────────────
      - name: 🔐 Apply S3 bucket policy for CloudFront
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          cat > /tmp/s3-oac-policy.json <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "AllowCloudFrontOACAccess",
                "Effect": "Allow",
                "Principal": { "Service": "cloudfront.amazonaws.com" },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::$BUCKET/*",
                "Condition": {
                  "StringEquals": {
                    "AWS:SourceArn": "arn:aws:cloudfront::$ACCOUNT:distribution/$DIST_ID"
                  }
                }
              }
            ]
          }
          EOF
          aws s3api put-bucket-policy \
            --bucket "$BUCKET" \
            --policy file:///tmp/s3-oac-policy.json \
            --region "$REGION"

      # ─── 9. Invalidate CloudFront Cache ──────────────────────
      - name: 🔄 CloudFront Invalidate /* and log status
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          INV=$(aws cloudfront create-invalidation \
            --distribution-id "$DIST_ID" \
            --paths '/*' \
            --query 'Invalidation.Id' --output text)
          echo "🕒 Waiting for CloudFront invalidation $INV…"
          aws cloudfront wait invalidation-completed \
            --distribution-id "$DIST_ID" --id "$INV"

      # ─── 10. Final CF URL Checks ─────────────────────────────
      - name: 🌐 Verify /login and /dashboard via CF
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          CF_DOMAIN=$(aws cloudfront get-distribution \
            --id "$DIST_ID" --query 'Distribution.DomainName' --output text)

          echo "✅ CloudFront Domain: https://$CF_DOMAIN"

          echo "▶️ /login:"
          curl -i https://$CF_DOMAIN/login || true

          echo "▶️ /dashboard:"
          curl -i https://$CF_DOMAIN/dashboard || true

      # ─── 11. ENHANCED: Full Deployment Summary ───────────────
      - name: 📊 Complete Deployment Summary
        run: |
          echo "🎉 COMPLETE ACTA-UI DEPLOYMENT SUMMARY"
          echo "====================================="
          echo "🕐 Deployed: $(date)"
          echo
          echo "🎯 FRONTEND:"
          echo "  ✅ Built with Vite"
          echo "  ✅ Deployed to S3"
          echo "  ✅ CloudFront distribution updated"
          echo "  ✅ Cache invalidated"
          echo
          echo "🎯 BACKEND (Simplified Lambda-Centric):"
          echo "  ✅ All PM endpoints routed to projectMetadataEnricher"
          echo "  ✅ No new Lambda functions needed"
          echo "  ✅ No DynamoDB costs"
          echo "  ✅ API Gateway deployment updated"
          echo
          echo "🔗 ENDPOINTS:"
          echo "  Frontend: https://d7t9x3j66yd8k.cloudfront.net"
          echo "  Backend:  https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod"
          echo
          echo "📋 NEW BACKEND ROUTES:"
          echo "  ✅ GET /pm-projects/all-projects"
          echo "  ✅ GET /pm-projects/{pmEmail}"
          echo "  ✅ GET /projects"  
          echo "  ✅ GET /check-document/{projectId}"
          echo "  ✅ HEAD /check-document/{projectId}"
          echo
          echo "💡 NEXT STEPS:"
          echo "  1. Test with authentication tokens"
          echo "  2. Enhance projectMetadataEnricher for PM queries"
          echo "  3. Update frontend to use browser storage"
          echo "  4. Remove DynamoDB dependencies (optional)"
          echo
          echo "🏆 DEPLOYMENT SUCCESSFUL!"
