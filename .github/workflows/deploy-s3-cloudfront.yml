name: 🚀 Deploy ACTA-UI to S3 + CloudFront

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production

env:
  NODE_VERSION: '18'
  VITE_API_BASE_URL: 'https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod'
  VITE_COGNITO_REGION: 'us-east-2'
  VITE_COGNITO_POOL_ID: 'us-east-2_FyHLtOhiY'
  VITE_COGNITO_WEB_CLIENT: 'dshos5iou44tuach7ta3ici5m'
  VITE_SKIP_AUTH: 'false'
  VITE_USE_MOCK_API: 'false'
  S3_BUCKET: 'acta-ui-frontend-prod'
  CLOUDFRONT_DISTRIBUTION_ID: 'EPQU7PVDLQXUA'
  AWS_REGION: 'us-east-2'

jobs:
  deploy:
    name: 🏗️ Build & Deploy to S3 + CloudFront
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: |
          echo "🧹 Clearing all caches..."
          rm -rf node_modules/.vite dist .cache
          pnpm install --frozen-lockfile
          
      - name: 🔍 Pre-build verification
        run: |
          echo "🔍 Verifying environment..."
          echo "API Base URL: $VITE_API_BASE_URL"
          echo "Skip Auth: $VITE_SKIP_AUTH"
          echo "Use Mock API: $VITE_USE_MOCK_API"
          echo "S3 Bucket: $S3_BUCKET"
          echo "CloudFront Distribution: $CLOUDFRONT_DISTRIBUTION_ID"
          
      - name: 🏗️ Build application
        run: |
          echo "🚀 Building for production..."
          pnpm run build
          echo "✅ Build completed!"
          
      - name: 🔍 Post-build verification
        run: |
          echo "🔍 Verifying build output..."
          
          # Check if build was successful
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi
          
          # Check document title
          if grep -q "Ikusi · Acta Platform" dist/index.html; then
            echo "✅ Document title correct"
          else
            echo "❌ Document title incorrect"
            exit 1
          fi
          
          # Check API URL in build
          if grep -q "q2b9avfwv5.execute-api.us-east-2.amazonaws.com" dist/assets/*.js; then
            echo "✅ Production API URL found in build"
          else
            echo "❌ Production API URL not found in build"
            exit 1
          fi
          
          # Verify no test data
          if grep -r "test-project\|mock-project" dist/ 2>/dev/null; then
            echo "❌ Test data found in build"
            exit 1
          else
            echo "✅ No test data in build"
          fi
          
          echo "🎯 Build verification successful!"
          
      - name: 🔧 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: ☁️ Deploy to S3
        run: |
          echo "☁️ Deploying to S3 bucket: $S3_BUCKET..."
          
          # Sync files to S3 with correct content types and cache headers
          aws s3 sync dist/ s3://$S3_BUCKET/ \
              --region $AWS_REGION \
              --delete \
              --cache-control "public, max-age=31536000" \
              --exclude "*.html" \
              --exclude "*.json"
          
          # Upload HTML files with no-cache headers
          aws s3 sync dist/ s3://$S3_BUCKET/ \
              --region $AWS_REGION \
              --cache-control "no-cache, no-store, must-revalidate" \
              --content-type "text/html" \
              --include "*.html"
          
          # Upload JSON files with no-cache headers
          aws s3 sync dist/ s3://$S3_BUCKET/ \
              --region $AWS_REGION \
              --cache-control "no-cache, no-store, must-revalidate" \
              --content-type "application/json" \
              --include "*.json"
          
          echo "✅ Files uploaded to S3 successfully!"
          
      - name: 🌐 Invalidate CloudFront cache
        run: |
          echo "🌐 Creating CloudFront invalidation..."
          
          # Create invalidation to refresh CloudFront cache
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
              --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
              --paths "/*" \
              --query 'Invalidation.Id' \
              --output text)
          
          echo "🔄 CloudFront invalidation created: $INVALIDATION_ID"
          echo "⏳ Waiting for invalidation to complete..."
          
          # Wait for invalidation to complete (with timeout)
          timeout 300 aws cloudfront wait invalidation-completed \
              --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
              --id $INVALIDATION_ID || echo "⏳ Invalidation still in progress..."
          
          echo "✅ CloudFront cache invalidation initiated!"
          
      - name: 🧪 Test deployment
        run: |
          echo "🧪 Testing deployment..."
          
          # Wait a moment for changes to propagate
          sleep 10
          
          # Test CloudFront endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://d7t9x3j66yd8k.cloudfront.net)
          if [ "$RESPONSE" = "200" ]; then
            echo "✅ CloudFront endpoint responding with 200"
          else
            echo "⚠️ CloudFront endpoint returned: $RESPONSE"
          fi
          
          # Check if the title is updated
          if curl -s https://d7t9x3j66yd8k.cloudfront.net | grep -q "Ikusi · Acta Platform"; then
            echo "✅ Updated content detected on CloudFront"
          else
            echo "⚠️ Content may still be propagating..."
          fi
          
      - name: 🎉 Deployment complete
        run: |
          echo "🎉 ACTA-UI deployment completed successfully!"
          echo "🌐 Your application is now live at:"
          echo "   📱 CloudFront URL: https://d7t9x3j66yd8k.cloudfront.net"
          echo "   🪣 S3 Bucket: $S3_BUCKET"
          echo "   🌍 CloudFront Distribution: $CLOUDFRONT_DISTRIBUTION_ID"
          echo ""
          echo "🔍 The deployment includes:"
          echo "   ✅ Document title: 'Ikusi · Acta Platform'"
          echo "   ✅ Live API integration: $VITE_API_BASE_URL"
          echo "   ✅ Cognito authentication configured"
          echo "   ✅ No test/mock data"
          echo "   ✅ CloudFront cache invalidated"
          echo ""
          echo "🧪 Test your deployment:"
          echo "curl -I https://d7t9x3j66yd8k.cloudfront.net"
          echo ""
          echo "✨ Your ACTA-UI is ready for production!"
