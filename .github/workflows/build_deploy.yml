# .github/workflows/build_deploy.yml
name: Build and Deploy

on:
  push:
    branches: [develop]              # auto-deploy from develop
  pull_request:
    branches: [develop]              # PRs still run lint/unit
  workflow_dispatch: {}              # manual trigger

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write                # OIDC → AWS
      contents: read

    steps:
    # ───── 0) Checkout ─────────────────────────────────────────
    - uses: actions/checkout@v4

    # 0.1) Ensure static dist/health exists up-front
    - name: 💚  Add /health object for UI
      run: echo '{"status":"ok"}' > public/health

    # 0.2) Auto-format (keeps ESLint happy & speeds CI)
    - name: 🧼  Prettier write-all
      run: npx prettier --write .

    # ───── 1) pnpm + Node (cached) ────────────────────────────
    - uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: |
          args: [--no-frozen-lockfile]

    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: pnpm

    # ───── 2) Lint & unit tests ───────────────────────────────
    - name: 🔍  ESLint + types
      run: pnpm lint
    - name: 🧪  Vitest
      run: pnpm run test:vitest

    # ───── 3) Build UI bundle (dist/) ─────────────────────────
    - name: Inject API base URL
      run: echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> "$GITHUB_ENV"

    - name: 🏗️  Build UI (Vite)
      run: pnpm run build

    # ───── 4) Local preview sanity ping ───────────────────────
    - name: 🌐  Canary preview /
      run: |
        pnpm exec vite preview --port 4173 --strictPort &
        PREVIEW_PID=$!
        sleep 3
        curl -fs http://localhost:4173/ > /dev/null
        kill $PREVIEW_PID

    # ───── 5) AWS creds (OIDC) ────────────────────────────────
    - uses: aws-actions/configure-aws-credentials@v4
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region:     ${{ secrets.AWS_REGION }}

    # ───── 6) SAM package+deploy backend ──────────────────────
    - name: ☁️  SAM deploy backend
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      env:
        ARTIFACT_BUCKET: ${{ secrets.ARTIFACT_BUCKET }}
      run: |
        pip install --quiet aws-sam-cli
        sam package \
          --template-file infra/template.yaml \
          --s3-bucket "$ARTIFACT_BUCKET" \
          --output-template-file packaged.yaml
        sam deploy \
          --template-file packaged.yaml \
          --stack-name acta-backend-staging \
          --capabilities CAPABILITY_IAM \
          --no-fail-on-empty-changeset

    # ───── 7) API smoke (backend /health) ─────────────────────
    - name: 🌡️  API /health
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      env:
        API_BASE: ${{ secrets.VITE_API_BASE_URL }}
      run: curl -fs "$API_BASE/health"

    # ───── 8) Deploy UI (S3 + CF) ─────────────────────────────
    - name: 🚀  Upload UI + invalidate
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      env:
        S3_BUCKET_NAME:     ${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
      run: |
        # ---------- sync all normal assets ----------
        aws s3 sync dist "s3://$S3_BUCKET_NAME" --delete

        # ---------- /health: no-cache so CF always refetches ----------
        aws s3 cp dist/health "s3://$S3_BUCKET_NAME/health" \
          --content-type 'text/plain' \
          --cache-control 'no-cache, no-store, must-revalidate'

        # ---------- fast CF purge: index.html only ----------
        INV=$(aws cloudfront create-invalidation \
          --distribution-id "$CLOUDFRONT_DIST_ID" \
          --paths '/index.html' \
          --query 'Invalidation.Id' --output text)

        echo "🕒 waiting for CF invalidation $INV…"
        aws cloudfront wait invalidation-completed \
          --distribution-id "$CLOUDFRONT_DIST_ID" --id "$INV"

    # ───── 9) CloudFront smoke (/health) ──────────────────────
    - name: 🌐  UI /health via CloudFront
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      env:
        CF_DOMAIN: ${{ secrets.DISTRIBUTION_DOMAIN_NAME }}
      run: |
        for n in {1..3}; do
          echo "Ping https://$CF_DOMAIN/health (try $n)…"
          curl -fs "https://$CF_DOMAIN/health" && exit 0
          sleep 5
        done
        echo "UI /health failed" >&2
        exit 1
