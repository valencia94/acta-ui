name: Build and Deploy

on:
  push:
    branches: [develop]
  workflow_dispatch: {}

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
      # ───── 0. Checkout ─────
      - uses: actions/checkout@v4

      # ───── 1. Toolchain Setup ─────
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      # ───── 2. Install + Lint + Format + Test ─────
      - run: pnpm install --frozen-lockfile
      - name: 🔍 ESLint + TypeScript
        run: pnpm lint
      - name: 🧼 Prettier auto-fix
        run: pnpm exec prettier --write .
      - name: 🧪 Prettier check
        run: pnpm exec prettier --check .
      - name: ✅ Vitest
        run: pnpm run test:vitest -- --run --passWithNoTests

      # ───── 3. Build ─────
      - name: Build (Vite)
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> "$GITHUB_ENV"
          pnpm run build

      # ───── 4. Local smoke test ─────
      - name: Local preview smoke
        run: |
          pnpm exec vite preview --port 4173 --strictPort & SERVER=$!
          sleep 4 && curl -sf http://localhost:4173/
          kill $SERVER

      # ───── 5. AWS OIDC credentials ─────
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ───── 6. Upload UI to S3 ─────
      - name: S3 sync dist/ & push SPA routes
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          set -eux
          aws s3 sync dist "s3://$BUCKET" --delete
          bash scripts/push-spa-routes.sh

      # ───── 7. Patch CF default root object ─────
      - name: Ensure CF root object = index.html
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          tmp=$(mktemp)
          aws cloudfront get-distribution-config --id "$DIST_ID" > "$tmp"
          jq '
            .DistributionConfig as $cfg
            | if $cfg.DefaultRootObject != "index.html"
              then ($cfg.DefaultRootObject = "index.html") | $cfg
              else $cfg end
          ' "$tmp" > /tmp/cf_patch.json || true
          if [ -s /tmp/cf_patch.json ]; then
            etag=$(jq -r .ETag "$tmp")
            aws cloudfront update-distribution \
              --id "$DIST_ID" \
              --if-match "$etag" \
              --distribution-config file:///tmp/cf_patch.json
            echo "🔄 DefaultRootObject set to index.html"
          else
            echo "✅ DefaultRootObject already index.html"
          fi

      # ───── 8. Ensure bucket policy for OAC ─────
      - name: Attach CloudFront OAC policy
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          cat > /tmp/s3-oac-policy.json <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "AllowCloudFrontOACAccess",
                "Effect": "Allow",
                "Principal": { "Service": "cloudfront.amazonaws.com" },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::$BUCKET/*",
                "Condition": {
                  "StringEquals": {
                    "AWS:SourceArn": "arn:aws:cloudfront::$ACCOUNT:distribution/$DIST_ID"
                  }
                }
              }
            ]
          }
EOF
          aws s3api put-bucket-policy --bucket "$BUCKET" --policy file:///tmp/s3-oac-policy.json --region "$REGION"

      # ───── 9. Invalidate CloudFront Cache ─────
      - name: CloudFront invalidate /* routes
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          INV=$(aws cloudfront create-invalidation \
                 --distribution-id "$DIST_ID" --paths '/*' \
                 --query 'Invalidation.Id' --output text)
          echo "🕒 waiting for invalidation $INV…"
          aws cloudfront wait invalidation-completed \
            --distribution-id "$DIST_ID" --id "$INV"