name: Build and Deploy 

on:
  push:
    branches: [develop]
  workflow_dispatch: {}

jobs:
  ci_deploy:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
      # ───────────────────────────────────────────────────────────────
      # 0. Checkout repo
      # ───────────────────────────────────────────────────────────────
      - name: 📥 Checkout
        uses: actions/checkout@v4

      # ───────────────────────────────────────────────────────────────
      # 1. Node / pnpm toolchain
      # ───────────────────────────────────────────────────────────────
      - name: 🛠️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🛠️ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      # ───────────────────────────────────────────────────────────────
      # 2. Install, format, lint, test
      # ───────────────────────────────────────────────────────────────
      - name: 📦 Install deps
        run: pnpm install --frozen-lockfile

      - name: 🧼 Prettier format
        run: pnpm exec prettier --write .

      - name: 🧼 ESLint auto‑fix
        run: pnpm exec eslint . --fix

      - name: 🔍 ESLint verify
        run: pnpm exec eslint .

      - name: 🧪 Lint + type‑check
        run: pnpm lint

      - name: ✅ Vitest unit tests
        run: pnpm run test:vitest -- --run --passWithNoTests

      # ───────────────────────────────────────────────────────────────
      # 3. Build UI (Vite)
      # ───────────────────────────────────────────────────────────────
      - name: 🔨 Build UI
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> "$GITHUB_ENV"
          pnpm run build

      - name: 📂 List dist/
        run: ls -R dist

      # ───────────────────────────────────────────────────────────────
      # 4. Local preview smoke test
      # ───────────────────────────────────────────────────────────────
      - name: 🌐 Smoke test build
        run: |
          pnpm exec vite preview --port 4173 --strictPort & PID=$!
          sleep 6 && curl -sf http://localhost:4173/
          kill $PID

      # ───────────────────────────────────────────────────────────────
      # 5. Configure AWS (OIDC)
      # ───────────────────────────────────────────────────────────────
      - name: 🔐 Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ───────────────────────────────────────────────────────────────
      # 6. Wait / cancel if stack is busy (acts as self‑healing gate)
      # ───────────────────────────────────────────────────────────────
      - name: ⏳ Ensure stack not busy
        env:
          STACK_NAME: acta-simplified-backend
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$REGION" --query 'Stacks[0].StackStatus' --output text || echo "NONE")
          echo "Current CFN status: $STATUS"
          if [[ "$STATUS" == *_IN_PROGRESS ]]; then
            echo "Attempting cancel-update-stack …"
            aws cloudformation cancel-update-stack --stack-name "$STACK_NAME" --region "$REGION" || true
          fi
          # wait until stack is in a stable COMPLETE state or deleted
          while true; do
            STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$REGION" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NONE")
            echo "  → $STATUS"
            case "$STATUS" in
              CREATE_IN_PROGRESS|UPDATE_IN_PROGRESS|UPDATE_ROLLBACK_IN_PROGRESS|ROLLBACK_IN_PROGRESS|UPDATE_COMPLETE_CLEANUP_IN_PROGRESS)
                sleep 15;;
              CREATE_COMPLETE|UPDATE_COMPLETE|UPDATE_ROLLBACK_COMPLETE|ROLLBACK_COMPLETE|NONE)
                break;;
              *)
                echo "❌ Unexpected terminal state: $STATUS"; exit 1;;
            esac
          done

      # ───────────────────────────────────────────────────────────────
      # 7. Package & deploy backend (SAM)
      # ───────────────────────────────────────────────────────────────
      - name: 📦 SAM package backend
        env:
          ARTIFACT_BUCKET: ${{ secrets.SAM_ARTIFACTS_BUCKET }}
        run: |
          set -euxo pipefail
          sam package \
            --template-file infra/template-conflict-free.yaml \
            --output-template-file infra/template-conflict-free-packaged.yaml \
            --s3-bucket "$ARTIFACT_BUCKET" \
            --region ${{ secrets.AWS_REGION }}

      - name: 🚀 SAM deploy backend
        run: |
          set -euxo pipefail
          TS=$(date +%Y%m%d-%H%M%S)
          sam deploy \
            --template-file infra/template-conflict-free-packaged.yaml \
            --stack-name acta-simplified-backend \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ secrets.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --parameter-overrides DeploymentTimestamp="$TS"

      # ───────────────────────────────────────────────────────────────
      # 8. Sync dist/ to S3 & push SPA routes
      # ───────────────────────────────────────────────────────────────
      - name: 🚀 Sync dist to S3
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          set -eux
          aws s3 sync dist "s3://$BUCKET" --delete
          bash scripts/push-spa-routes.sh

      - name: 🧾 List S3 contents
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: aws s3 ls "s3://$BUCKET/" --recursive

      # ───────────────────────────────────────────────────────────────
      # 9. Ensure CloudFront root object = index.html
      # ───────────────────────────────────────────────────────────────
      - name: 🛠️ Ensure CF root object = index.html
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          tmp=$(mktemp)
          aws cloudfront get-distribution-config --id "$DIST_ID" > "$tmp"
          etag=$(jq -r .ETag "$tmp")
          ROOT=$(jq -r .DistributionConfig.DefaultRootObject "$tmp")
          if [[ "$ROOT" != "index.html" ]]; then
            jq '.DistributionConfig.DefaultRootObject = "index.html" | .DistributionConfig' "$tmp" > /tmp/cf_patch.json
            aws cloudfront update-distribution --id "$DIST_ID" --if-match "$etag" --distribution-config file:///tmp/cf_patch.json
            echo "🔄 CF root object set to index.html"
          else
            echo "✅ CF root object already index.html"
          fi
          rm -f "$tmp"

      # ───────────────────────────────────────────────────────────────
      # 10. Apply S3 bucket policy for CloudFront OAC
      # ───────────────────────────────────────────────────────────────
      - name: 🔐 Apply S3 bucket policy
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          cat > /tmp/s3-oac-policy.json <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "AllowCloudFrontOACAccess",
                "Effect": "Allow",
                "Principal": { "Service": "cloudfront.amazonaws.com" },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::$BUCKET/*",
                "Condition": {
                  "StringEquals": { "AWS:SourceArn": "arn:aws:cloudfront::$ACCOUNT:distribution/$DIST_ID" }
                }
              }
            ]
          }
          EOF
          aws s3api put-bucket-policy --bucket "$BUCKET" --policy file:///tmp/s3-oac-policy.json --region "$REGION"

      # ───────────────────────────────────────────────────────────────
      # 11. CloudFront invalidation & validation
      # ───────────────────────────────────────────────────────────────
      - name: 🔄 CloudFront Invalidate /* and log status
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          INV=$(aws cloudfront create-invalidation \
            --distribution-id "$DIST_ID" \
            --paths '/*' \
            --query 'Invalidation.Id' --output text)
          echo "🕒 Waiting for CloudFront invalidation $INV…"
          aws cloudfront wait invalidation-completed \
            --distribution-id "$DIST_ID" --id "$INV"

      - name: 🌐 Verify /login and /dashboard via CF
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          CF_DOMAIN=$(aws cloudfront get-distribution \
            --id "$DIST_ID" --query 'Distribution.DomainName' --output text)

          echo "✅ CloudFront Domain: https://$CF_DOMAIN"

          echo "▶️ /login:"
          curl -i https://$CF_DOMAIN/login || true

          echo "▶️ /dashboard:"
          curl -i https://$CF_DOMAIN/dashboard || true

      - name: 📊 Complete Deployment Summary
        run: |
          echo "🎉 COMPLETE ACTA-UI DEPLOYMENT SUMMARY"
          echo "====================================="
          echo "🕐 Deployed: $(date)"
          echo
          echo "🎯 FRONTEND:"
          echo "  ✅ Built with Vite"
          echo "  ✅ Deployed to S3"
          echo "  ✅ CloudFront distribution updated"
          echo "  ✅ Cache invalidated"
          echo
          echo "🎯 BACKEND (Simplified Lambda-Centric):"
          echo "  ✅ All PM endpoints routed to projectMetadataEnricher"
          echo "  ✅ No new Lambda functions needed"
          echo "  ✅ No DynamoDB costs"
          echo "  ✅ API Gateway deployment updated"
          echo
          echo "🔗 ENDPOINTS:"
          echo "  Frontend: https://d7t9x3j66yd8k.cloudfront.net"
          echo "  Backend:  https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod"
          echo
          echo "📋 NEW BACKEND ROUTES:"
          echo "  ✅ GET /pm-projects/all-projects"
          echo "  ✅ GET /pm-projects/{pmEmail}"
          echo "  ✅ GET /projects"
          echo "  ✅ GET /check-document/{projectId}"
          echo "  ✅ HEAD /check-document/{projectId}"
          echo
          echo "💡 NEXT STEPS:"
          echo "  1. Test with authentication tokens"
          echo "  2. Enhance projectMetadataEnricher for PM queries"
          echo "  3. Update frontend to use browser storage"
          echo "  4. Remove DynamoDB dependencies (optional)"
          echo
          echo "🏆 DEPLOYMENT SUCCESSFUL!"
