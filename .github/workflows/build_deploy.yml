name: Build and Deploy

on:
  push:
    branches: [develop]
  workflow_dispatch: {}

jobs:
  ci_deploy:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write      # OIDC for AWS
      contents: read

    steps:
      # ───────────────────────────────────────────────────────────────
      # 0. Checkout the repository
      # ───────────────────────────────────────────────────────────────
      - name: 📥 Checkout
        uses: actions/checkout@v4

      # ───────────────────────────────────────────────────────────────
      # 1. Set up Node.js + pnpm toolchain
      # ───────────────────────────────────────────────────────────────
      - name: 🛠️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🛠️ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      # ───────────────────────────────────────────────────────────────
      # 2. Install dependencies, format, lint, and test
      # ───────────────────────────────────────────────────────────────
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧼 Prettier format (auto‑fix)
        run: pnpm exec prettier --write .

      - name: 🧼 ESLint (auto‑fix)
        run: pnpm exec eslint . --fix

      - name: 🔍 ESLint verify
        run: pnpm exec eslint .

      - name: 🧪 Lint + TypeScript
        run: pnpm lint

      - name: ✅ Vitest unit tests
        run: pnpm run test:vitest -- --run --passWithNoTests

      # ───────────────────────────────────────────────────────────────
      # 3. Build the UI with Vite
      # ───────────────────────────────────────────────────────────────
      - name: 🔨 Build UI
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> "$GITHUB_ENV"
          pnpm run build

      - name: 📂 List dist/ before upload
        run: ls -R dist

      # ───────────────────────────────────────────────────────────────
      # 4. Local preview smoke test (vite preview)
      # ───────────────────────────────────────────────────────────────
      - name: 🌐 Local preview smoke test
        run: |
          pnpm exec vite preview --port 4173 --strictPort & SERVER=$!
          sleep 5 && curl -sf http://localhost:4173/
          kill $SERVER

      # ───────────────────────────────────────────────────────────────
      # 5. Configure AWS credentials (OIDC)
      # ───────────────────────────────────────────────────────────────
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ───────────────────────────────────────────────────────────────
      # 6. Backend deployment – CloudFormation/SAM (template‑conflict‑free)
      # ───────────────────────────────────────────────────────────────
      - name: 📦 Package backend SAM template
        env:
          ARTIFACT_BUCKET: ${{ secrets.SAM_ARTIFACTS_BUCKET }}
        run: |
          set -euxo pipefail
          sam package \
            --template-file infra/template-conflict-free.yaml \
            --output-template-file infra/template-conflict-free-packaged.yaml \
            --s3-bucket "$ARTIFACT_BUCKET" \
            --region ${{ secrets.AWS_REGION }}

      - name: 🚀 Deploy backend stack
        run: |
          set -euxo pipefail
          TS=$(date +%Y%m%d-%H%M%S)
          sam deploy \
            --template-file infra/template-conflict-free-packaged.yaml \
            --stack-name acta-simplified-backend \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ secrets.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --parameter-overrides DeploymentTimestamp="$TS"

      # ───────────────────────────────────────────────────────────────
      # 7. Sync built UI to S3 & push SPA routes
      # ───────────────────────────────────────────────────────────────
      - name: 🚀 Sync dist/ to S3
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          set -eux
          aws s3 sync dist "s3://$BUCKET" --delete
          bash scripts/push-spa-routes.sh

      - name: 🧾 Log S3 contents
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          aws s3 ls "s3://$BUCKET/" --recursive

      # ───────────────────────────────────────────────────────────────
      # 8. Ensure CloudFront root object = index.html
      # ───────────────────────────────────────────────────────────────
      - name: 🛠️ Ensure CF root object = index.html
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          tmp=$(mktemp)
          aws cloudfront get-distribution-config --id "$DIST_ID" > "$tmp"
          etag=$(jq -r .ETag "$tmp")
          jq '(.DistributionConfig.DefaultRootObject) as $root | if $root != "index.html" then (.DistributionConfig.DefaultRootObject = "index.html") else empty end' "$tmp" > /tmp/cf_patch.json
          if [ -s /tmp/cf_patch.json ]; then
            aws cloudfront update-distribution \
              --id "$DIST_ID" \
              --if-match "$etag" \
              --distribution-config file:///tmp/cf_patch.json
            echo "🔄 CloudFront root object set to index.html"
          else
            echo "✅ CloudFront root object already index.html"
          fi
          rm -f "$tmp"

      # ───────────────────────────────────────────────────────────────
      # 9. Apply S3 bucket policy for CloudFront OAC
      # ───────────────────────────────────────────────────────────────
      - name: 🔐 Apply S3 bucket policy for CloudFront
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          cat > /tmp/s3-oac-policy.json <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "AllowCloudFrontOACAccess",
                "Effect": "Allow",
                "Principal": { "Service": "cloudfront.amazonaws.com" },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::$BUCKET/*",
                "Condition": {
                  "StringEquals": {
                    "AWS:SourceArn": "arn:aws:cloudfront::$ACCOUNT:distribution/$DIST_ID"
                  }
                }
              }
            ]
          }
          EOF
          aws s3api put-bucket-policy --bucket "$BUCKET" --policy file:///tmp/s3-oac-policy.json --region "$REGION"

      # ───────────────────────────────────────────────────────────────
      # 10. Invalidate CloudFront cache
      # ───────────────────────────────────────────────────────────────
      - name: 🔄 CloudFront invalidate /* and wait
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          set -eux
          INV=$(aws cloudfront create-invalidation --distribution-id "$DIST_ID" --paths '/*' --query 'Invalidation.Id' --output text)
          echo "🕒 Waiting for CloudFront invalidation $INV …"
          aws cloudfront wait invalidation-completed --distribution-id "$DIST_ID" --id "$INV"

      # ───────────────────────────────────────────────────────────────
      # 11. Final URL checks via CloudFront
      # ───────────────────────────────────────────────────────────────
      - name: 🌐 Verify /login and /dashboard via CF
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          set -eux
          CF_DOMAIN=$(aws cloudfront get-distribution --id "$DIST_ID" --query 'Distribution.DomainName' --output text)
          echo "✅ CloudFront Domain: https://$CF_DOMAIN"
          echo "▶️ /login:" && curl -i https://$CF_DOMAIN/login || true
          echo "▶️ /dashboard:" && curl -i https://$CF_DOMAIN/dashboard || true
