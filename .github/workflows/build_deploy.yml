name: Build and Deploy

on:
  push:
    branches: [develop]
  pull_request:
  workflow_dispatch:

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
    # 0) Checkout ───────────────────────────────────────────────
    - uses: actions/checkout@v4

    # 1) Install pnpm first ─────────────────────────────────────
    - name: ♻️  pnpm cache & install
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: |
          args: [--no-frozen-lockfile]
      env:
        CI: true

    # 1.1) Then set up Node (and keep cache: pnpm) ───────────────
    - name: 🟢  Setup Node 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: pnpm

    # ───── 2) Lint / unit tests ─────────────────────────────────
    - name: 🔍 Lint & type-check
      run: pnpm lint

    - name: 🧪 Unit tests
      run: pnpm run test:vitest

    # ───────── 2) Lint / unit tests ─
    - name: 🔍  Lint & type-check
      run: pnpm lint

    - name: 🧪  Unit tests
      run: pnpm run test:vitest

    # ───────── 3) Build UI (creates dist/) ─
    - name: 🏗️  Build UI
      run: pnpm run build            # ← dist/ now exists

    # ───────── 4) Playwright E2E ───
    - name: 🎭  E2E tests
      run: |
        pnpm exec playwright install --with-deps
        pnpm exec playwright test

    # ───────── 5) AWS creds via OIDC ─
    - name: 🔑  Configure AWS credentials
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region:     ${{ secrets.AWS_REGION }}

    # ───────── 6) SAM package & deploy ─
    - name: ☁️  Package & deploy backend (SAM)
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      env:
        ARTIFACT_BUCKET: ${{ secrets.ARTIFACT_BUCKET }}
      run: |
        pip install --quiet aws-sam-cli
        sam package \
          --template-file infra/template.yaml \
          --s3-bucket "$ARTIFACT_BUCKET" \
          --output-template-file packaged.yaml
        sam deploy \
          --template-file packaged.yaml \
          --stack-name acta-backend-staging \
          --capabilities CAPABILITY_IAM \
          --no-fail-on-empty-changeset

    # ───────── 7) API smoke test ─────
    - name: 🌡️  API /health
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      env:
        API_BASE: ${{ secrets.VITE_API_BASE_URL }}
      run: |
        for n in {1..5}; do
          echo "Ping $API_BASE/health (attempt $n)"
          curl -fs "$API_BASE/health" && exit 0
          sleep 5
        done
        echo "API health endpoint failed after 5 attempts" >&2
        exit 1

    # ───────── 8) Upload UI to S3 ─────
    - name: 🚀  Deploy UI to S3 + CloudFront
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      env:
        S3_BUCKET_NAME:     ${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
      run: |
        chmod +x scripts/deploy-to-s3.sh
        ./scripts/deploy-to-s3.sh

    # ───────── 9) UI smoke test ───────
    - name: 🌐  UI /health
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      env:
        CLOUDFRONT_DOMAIN: ${{ secrets.DISTRIBUTION_DOMAIN_NAME }}
      run: |
        for n in {1..5}; do
          echo "Ping https://$CLOUDFRONT_DOMAIN/health (attempt $n)"
          curl -fs "https://$CLOUDFRONT_DOMAIN/health" && exit 0
          sleep 15
        done
        echo "UI health endpoint failed after 5 attempts" >&2
        exit 1

    # ───────── 10) Upload Playwright report ─
    - name: 📦  Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: playwright-report
        retention-days: 3
