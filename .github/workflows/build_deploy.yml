# .github/workflows/build_deploy.yml
name: Build and Deploy

on:
  push:
    branches: [develop]
  workflow_dispatch: {}

jobs:
  ci_deploy:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
      # ─── 0. Checkout ─────────────────────────────────────────
      - uses: actions/checkout@v4

      # ─── 1. Node & pnpm toolchain ───────────────────────────
      - uses: pnpm/action-setup@v2
        with: { version: 9 }

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      # ─── 2. Install, Format, Test ───────────────────────────
      - run: pnpm install --frozen-lockfile

      - name: 🧼 Prettier Format (Auto-Fix)
        run: pnpm exec prettier --write .

      - name: 🔍 Prettier Check (Fail if unformatted)
        run: pnpm exec prettier --check .

      - name: 🧪 Lint + TypeScript
        run: pnpm lint

      - name: ✅ Vitest Unit Tests
        run: pnpm run test:vitest -- --run --passWithNoTests

      # ─── 3. Build (Vite) ─────────────────────────────────────
      - name: 🔨 Build UI
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> "$GITHUB_ENV"
          pnpm run build

      - name: 📂 List dist/ before upload
        run: ls -R dist

      # ─── 4. Local Preview Smoke Test ─────────────────────────
      - name: 🌐 Local preview smoke test
        run: |
          pnpm exec vite preview --port 4173 --strictPort & SERVER=$!
          sleep 5 && curl -sf http://localhost:4173/
          kill $SERVER

      # ─── 5. AWS Auth ─────────────────────────────────────────
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ secrets.AWS_REGION }}

      # ─── 6. Sync to S3 + Push SPA Routes ─────────────────────
      - name: 🚀 Sync dist/ to S3
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          set -eux
          aws s3 sync dist "s3://$BUCKET" --delete
          bash scripts/push-spa-routes.sh

      - name: 🧾 Log current S3 contents
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          echo "✅ Dumping full contents of s3://$BUCKET:"
          aws s3 ls s3://$BUCKET/ --recursive

      # ─── 7. Ensure CF root object = index.html ───────────────
      - name: 🛠️ Set CF root object if needed
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          tmp=$(mktemp)
          aws cloudfront get-distribution-config --id "$DIST_ID" > "$tmp"
          jq '
            .DistributionConfig as $cfg
            | if $cfg.DefaultRootObject != "index.html"
              then ($cfg.DefaultRootObject = "index.html") | $cfg
              else $cfg end
          ' "$tmp" > /tmp/cf_patch.json || true
          if [ -s /tmp/cf_patch.json ]; then
            etag=$(jq -r .ETag "$tmp")
            aws cloudfront update-distribution \
              --id "$DIST_ID" \
              --if-match "$etag" \
              --distribution-config file:///tmp/cf_patch.json
            echo "🔄 CF root object set to index.html"
          else
            echo "✅ CF root object already set"
          fi
          rm -f "$tmp"

      # ─── 8. OAC Policy ───────────────────────────────────────
      - name: 🔐 Apply S3 bucket policy for CloudFront
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
          REGION:  ${{ secrets.AWS_REGION }}
        run: |
          ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          cat > /tmp/s3-oac-policy.json <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "AllowCloudFrontOACAccess",
                "Effect": "Allow",
                "Principal": { "Service": "cloudfront.amazonaws.com" },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::$BUCKET/*",
                "Condition": {
                  "StringEquals": {
                    "AWS:SourceArn": "arn:aws:cloudfront::$ACCOUNT:distribution/$DIST_ID"
                  }
                }
              }
            ]
          }
          EOF
          aws s3api put-bucket-policy \
            --bucket "$BUCKET" \
            --policy file:///tmp/s3-oac-policy.json \
            --region "$REGION"

      # ─── 9. Invalidate CloudFront Cache ──────────────────────
      - name: 🔄 CloudFront Invalidate /* and log status
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          INV=$(aws cloudfront create-invalidation \
            --distribution-id "$DIST_ID" \
            --paths '/*' \
            --query 'Invalidation.Id' --output text)
          echo "🕒 Waiting for CloudFront invalidation $INV…"
          aws cloudfront wait invalidation-completed \
            --distribution-id "$DIST_ID" --id "$INV"

      # ─── 10. Final CF URL Checks ─────────────────────────────
      - name: 🌐 Verify /login and /dashboard via CF
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          CF_DOMAIN=$(aws cloudfront get-distribution \
            --id "$DIST_ID" --query 'Distribution.DomainName' --output text)

          echo "✅ CloudFront Domain: https://$CF_DOMAIN"

          echo "▶️ /login:"
          curl -i https://$CF_DOMAIN/login || true

          echo "▶️ /dashboard:"
          curl -i https://$CF_DOMAIN/dashboard || true