name: Build and Deploy

on:
  push:
    branches: [develop]          # auto-deploy from develop
  pull_request:                  # PRs still run lint/tests
  workflow_dispatch:

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    environment: prod            # for OIDC
    permissions:
      id-token: write            # OIDC token
      contents: read

    steps:
    # 0) Checkout ───────────────────────────────────────────────
    - uses: actions/checkout@v4

    # 1) Install pnpm first ─────────────────────────────────────
    - name: ♻️  pnpm cache & install
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: |
          args: [--no-frozen-lockfile]
      env:
        CI: true

    # 1.1) Then set up Node (and keep cache: pnpm) ───────────────
    - name: 🟢  Setup Node 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: pnpm

    # ───── 2) Lint / unit tests ─────────────────────────────────
    - name: 🔍 Lint & type-check
      run: pnpm lint

    - name: 🧪 Unit tests
      run: pnpm run test:vitest

    # ───── 3) Configure AWS creds via OIDC ──────────────────────
    - name: 🔑 Configure AWS credentials (OIDC)
      if: >-
        (github.ref == 'refs/heads/develop')
        && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region:     ${{ secrets.AWS_REGION }}

    # ───── 4) Install SAM CLI ───────────────────────────────────
    - name: 🔧 Install AWS SAM CLI
      run: pip install aws-sam-cli --quiet

    # ───── 4.1) Verify artifact bucket secret ───────────────────
    - name: 🔒 Verify ARTIFACT_BUCKET is set
      run: |
        if [ -z "$ARTIFACT_BUCKET" ]; then
          echo "::error ::ARTIFACT_BUCKET secret is not defined"
          exit 1
        fi
      env:
        ARTIFACT_BUCKET: ${{ secrets.ARTIFACT_BUCKET }}

    # ───── 5) Package & deploy API with SAM ─────────────────────
    - name: ☁️ Package & deploy backend (SAM)
      if: >-
        (github.ref == 'refs/heads/develop')
        && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      env:
        ARTIFACT_BUCKET: ${{ secrets.ARTIFACT_BUCKET }}
      run: |
        sam package \
          --template-file infra/template.yaml \
          --s3-bucket "$ARTIFACT_BUCKET" \
          --output-template-file packaged.yaml

        sam deploy \
          --template-file packaged.yaml \
          --stack-name acta-backend-staging \
          --capabilities CAPABILITY_IAM \
          --no-fail-on-empty-changeset

    # ───── 6) API smoke test ────────────────────────────────────
- name: API smoke test
  if: >-
    (github.ref == 'refs/heads/develop')
    && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
  env:
    API_BASE: ${{ secrets.VITE_API_BASE_URL }}
  run: |
    n=0
    until [ $n -ge 5 ]; do
      echo "Ping $API_BASE/health (attempt $((n+1)))"
      curl -f -s "$API_BASE/health" && exit 0
      n=$((n+1))
      sleep 5
    done
    echo "API health endpoint failed after 5 attempts" >&2
    exit 1

    # ───── 8) Playwright E2E tests ──────────────────────────────
    - name: E2E tests
      run: |
        pnpm exec playwright install --with-deps
        pnpm exec playwright test

    # ───── 9) Deploy UI to S3 + invalidate CloudFront ───────────
    - name: 🚀 Deploy UI to S3 + CloudFront
      if: >-
        (github.ref == 'refs/heads/develop')
        && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      env:
        S3_BUCKET_NAME:     ${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
      run: |
        chmod +x scripts/deploy-to-s3.sh
        ./scripts/deploy-to-s3.sh

    # ───── 10) UI smoke test via CloudFront /health ─────────────
    - name: Smoke Test (UI /health)
      if: >-
        (github.ref == 'refs/heads/develop')
        && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      env:
        CLOUDFRONT_DOMAIN: ${{ secrets.DISTRIBUTION_DOMAIN_NAME }}
      run: |
        echo "🔧 Checking CloudFront health endpoint via /health"
        n=0
        until [ $n -ge 5 ]; do
          echo "Attempt $((n+1))..."
          curl -f -s "https://$CLOUDFRONT_DOMAIN/health" && { echo "UI live ✅"; exit 0; }
          n=$((n+1))
          echo "Still not healthy. Waiting 15s..."
          sleep 15
        done
        echo "UI health endpoint failed after multiple attempts." >&2
        exit 1

    # ───── 11) Upload Playwright report ─────────────────────────
    - name: 📦 Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: playwright-report
        retention-days: 3
