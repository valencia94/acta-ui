name: Build and Deploy (Frontend Only)

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch: {}

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: üíö Add static /health
        run: |
          mkdir -p public
          echo '{"status":"ok"}' > public/health

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - run: pnpm install --no-frozen-lockfile

      - name: üßº Format
        run: |
          pnpm exec prettier --write "**/*.{js,ts,tsx,css,md,yaml,yml,json}" "!.github/workflows/**/*.yml"

      - name: üîç ESLint & Type Check
        run: pnpm lint

      - name: üß™ Vitest
        run: pnpm run test:vitest

      - name: üèóÔ∏è Build (Vite)
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> "$GITHUB_ENV"
          pnpm run build

      - name: üåê Local Preview Smoke Test
        run: |
          pnpm exec vite preview --port 4173 --strictPort & SERVER=$!
          sleep 4
          curl -sf http://localhost:4173/
          kill $SERVER

      - uses: aws-actions/configure-aws-credentials@v4
        if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üöÄ Deploy UI (S3 + CF)
        if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          set -eux
          aws s3 sync dist "s3://$BUCKET" --delete
          aws s3 cp dist/health "s3://$BUCKET/health"                 --cache-control 'no-cache, no-store, must-revalidate'                 --content-type 'application/json'
          INV=$(aws cloudfront create-invalidation                 --distribution-id "$DIST_ID" --paths '/index.html'                 --query 'Invalidation.Id' --output text)
          echo "üïí waiting for invalidation $INV‚Ä¶"
          aws cloudfront wait invalidation-completed                 --distribution-id "$DIST_ID" --id "$INV"

      - name: üåê UI /health via CF
        if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          set -e
          CF_DOMAIN=$(aws cloudfront get-distribution                 --id "$DIST_ID" --query 'Distribution.DomainName' --output text)
          echo "CloudFront domain: $CF_DOMAIN"

          delay=5
          for n in {1..8}; do
            echo "Ping https://$CF_DOMAIN/health (try $n)‚Ä¶"
            curl -fs "https://$CF_DOMAIN/health" && exit 0
            sleep $delay; delay=$((delay*2))
          done
          echo "UI /health failed ‚úñ"
          curl -v "https://$CF_DOMAIN/health" || true
          exit 1
