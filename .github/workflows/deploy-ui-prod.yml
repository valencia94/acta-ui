name: üöÄ Deploy ACTA-UI to S3 + CloudFront

on:
  push:
    branches: [develop, main]

env:
  AWS_REGION: us-east-2
  S3_BUCKET: acta-ui-frontend-prod
  CLOUDFRONT_DISTRIBUTION_ID: EPQU7PVDLQXUA
  NODE_VERSION: 20
  # API identifiers pulled from repo secrets  üîΩ
  API_ID:       ${{ secrets.ACTA_API_ID }}
  API_ROOT_ID:  ${{ secrets.ACTA_API_ROOT_ID }}   # safe even if script ignores it
  API_STAGE:    prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # for OIDC role

    steps:
      # 1Ô∏è‚É£  Checkout source
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£  Install PNPM (puts binary in /usr/local/bin)
      - name: üü£ Set up PNPM
        uses: pnpm/action-setup@v4
        with:
          standalone: true
          run_install: false

      # 3Ô∏è‚É£  Set up Node with PNPM cache
      - name: üîß Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      # 4Ô∏è‚É£  Install dependencies
      - name: üì¶ Install deps
        run: pnpm install --frozen-lockfile

      # 5Ô∏è‚É£  Configure AWS credentials *before* any AWS SDK/CLI
      - name: üîí Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          # Uncomment below if you use static keys instead of OIDC
          # aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 6Ô∏è‚É£  Enable CORS on API Gateway (needs creds + API_ID)
      - name: ‚öôÔ∏è Enable CORS on API Gateway
        run: node scripts/enable-cors.js
        # No extra env: block needed; script inherits API_ID, API_ROOT_ID, API_STAGE

      # 7Ô∏è‚É£  Build the UI
      - name: üèóÔ∏è Build
        run: pnpm run build

      # 8Ô∏è‚É£  Deploy to S3 + invalidate CloudFront
      - name: üì§ Sync to S3
        run: aws s3 sync dist/ s3://$S3_BUCKET/ --delete --region $AWS_REGION

      - name: üöÄ Invalidate CloudFront
        run: aws cloudfront create-invalidation \
             --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
             --paths '/*'
