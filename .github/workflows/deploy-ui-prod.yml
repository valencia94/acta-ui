name: üöÄ Deploy ACTA-UI to S3 + CloudFront

on:
  push:
    branches: [develop, main]

env:
  AWS_REGION: us-east-2
  S3_BUCKET: acta-ui-frontend-prod
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
  NODE_VERSION: 20
  API_ID:      ${{ secrets.ACTA_API_ID }}
  API_ROOT_ID: ${{ secrets.ACTA_API_ROOT_ID }}
  API_STAGE:   prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: üü£ Set up PNPM
        uses: pnpm/action-setup@v4
        with:
          standalone: true
          run_install: false

      - name: üîß Set up Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: üì¶ Install deps
        run: pnpm install --frozen-lockfile --ignore-scripts

      # ---------- CI checks split for clarity ----------
      - name: üîé Type-check
        run: pnpm exec tsc --noEmit

      - name: üßπ Lint (fail on warnings)
        run: pnpm exec eslint . --max-warnings=0

      - name: üèóÔ∏è Build
        run: pnpm run build
      # -------------------------------------------------

      - name: üîí Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚úÖ Guard API_ID
        run: |
          if [ -z "$API_ID" ]; then
            echo "‚ùå API_ID is empty ‚Äì aborting" >&2
            exit 1
          fi

      - name: üîÑ Sanitise CloudFront ID
        run: |
          CF_CLEAN=$(echo -n "$CLOUDFRONT_DISTRIBUTION_ID" | tr -d '[:space:]')
          if [ -z "$CF_CLEAN" ]; then
            echo "‚ùå CLOUDFRONT_DISTRIBUTION_ID is empty ‚Äì aborting" >&2
            exit 1
          fi
          echo "CF_ID=$CF_CLEAN" >> "$GITHUB_ENV"
          echo "‚Üí Using CloudFront ID: $CF_CLEAN"

      - name: ‚öôÔ∏è Enable CORS on API Gateway (optional)
        run: |
          if [ -f scripts/enable-cors.js ]; then
            node scripts/enable-cors.js
          else
            echo 'scripts/enable-cors.js not found ‚Äì skipping'
          fi

      - name: üì§ Sync to S3
        run: aws s3 sync dist/ "s3://$S3_BUCKET/" --delete --region "$AWS_REGION"

      - name: üöÄ Invalidate CloudFront
        run: aws cloudfront create-invalidation --distribution-id "$CF_ID" --paths '/*'

      # Always-on diagnostics so ‚Äúwhy didn‚Äôt it run?‚Äù is obvious
      - name: ü©∫ Post-mortem (always)
        if: ${{ always() }}
        run: |
          echo "event: $GITHUB_EVENT_NAME"
          echo "ref:   $GITHUB_REF"
          echo "sha:   $GITHUB_SHA"
          echo "actor: $GITHUB_ACTOR"
