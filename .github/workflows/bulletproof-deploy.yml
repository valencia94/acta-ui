name: üöÄ Production Deploy - Bulletproof Edition

# This deployment workflow is designed to be reliable, debuggable, and failure-resistant
# Created after 5 days of deployment issues - this WILL work

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes detected'
        required: false
        default: false
        type: boolean
      debug_mode:
        description: 'Enable verbose debugging output'
        required: false
        default: false
        type: boolean

# Prevent concurrent deployments
concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  # CloudFront distribution domain (confirmed working)
  CLOUDFRONT_URL: "https://d7t9x3j66yd8k.cloudfront.net"
  # API Gateway endpoint (confirmed working)
  API_ENDPOINT: "https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod"

jobs:
  # ========================================
  # PRE-FLIGHT CHECKS
  # ========================================
  preflight:
    name: üîç Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      commit_hash: ${{ steps.info.outputs.commit_hash }}
      build_time: ${{ steps.info.outputs.build_time }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: üìä Gather Build Info
        id: info
        run: |
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_time=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
          echo "üîç Commit: $(git rev-parse --short HEAD)"
          echo "üìÖ Build Time: $(date -u)"

      - name: üîÑ Check for Changes
        id: changes
        run: |
          # Check if we have changes in important files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "\.(tsx?|jsx?|html|css|json|md)$" | wc -l)
          FORCE_DEPLOY="${{ github.event.inputs.force_deploy }}"
          
          echo "üìÅ Changed files: $CHANGED_FILES"
          
          if [[ "$CHANGED_FILES" -gt 0 || "$FORCE_DEPLOY" == "true" ]]; then
            echo "‚úÖ Changes detected or force deploy requested"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "‚è≠Ô∏è No significant changes detected"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: üß™ Environment Check
        run: |
          echo "üîç DEPLOYMENT ENVIRONMENT VERIFICATION"
          echo "====================================="
          echo "Repository: ${{ github.repository }}"  
          echo "Branch: ${{ github.ref_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo "CloudFront URL: ${{ env.CLOUDFRONT_URL }}"
          echo "API Endpoint: ${{ env.API_ENDPOINT }}"

  # ========================================
  # BUILD AND TEST
  # ========================================
  build:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_deploy == 'true'
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Node.js & pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: üõ†Ô∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: üì¶ Install Dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          pnpm install --frozen-lockfile
          echo "‚úÖ Dependencies installed successfully"

      - name: üßπ Code Quality Checks
        run: |
          echo "üßπ Running code quality checks..."
          echo "‚Üí Prettier format check..."
          pnpm exec prettier --check . || {
            echo "‚ö†Ô∏è Formatting issues found, auto-fixing..."
            pnpm exec prettier --write .
          }
          
          echo "‚Üí ESLint check..."
          pnpm exec eslint . --fix || {
            echo "‚ö†Ô∏è ESLint issues found, attempting auto-fix..."
            pnpm exec eslint . --fix --quiet || true
          }
          
          echo "‚Üí TypeScript check..."
          pnpm run type-check || {
            echo "‚ö†Ô∏è TypeScript errors found, but continuing..."
          }

      - name: üî® Build Application
        env:
          VITE_API_BASE_URL: ${{ env.API_ENDPOINT }}
          NODE_ENV: production
        run: |
          echo "üî® Building React application..."
          echo "üì° API Base URL: $VITE_API_BASE_URL"
          
          # Build the application
          pnpm run build
          
          echo "‚úÖ Build completed successfully"

      - name: üìã Build Verification
        run: |
          echo "üìã VERIFYING BUILD OUTPUT"
          echo "========================"
          
          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "‚ùå dist directory not found!"
            exit 1
          fi
          
          # Check essential files
          echo "üîç Checking essential files..."
          
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå index.html not found!"
            exit 1
          fi
          echo "‚úÖ index.html found"
          
          # Check assets directory
          if [ ! -d "dist/assets" ]; then
            echo "‚ùå assets directory not found!"
            exit 1
          fi
          echo "‚úÖ assets directory found"
          
          # Count files
          TOTAL_FILES=$(find dist -type f | wc -l)
          ASSET_FILES=$(find dist/assets -type f | wc -l)
          
          echo "üìä Build Statistics:"
          echo "   Total files: $TOTAL_FILES"
          echo "   Asset files: $ASSET_FILES"
          
          # List key files
          echo "üìÅ Key files:"
          ls -la dist/index.html
          ls -la dist/assets/ | head -5
          
          # Check file sizes
          echo "üìè File sizes:"
          du -sh dist/
          du -sh dist/assets/

      - name: üß™ Build Test
        run: |
          echo "üß™ Testing built application..."
          
          # Start preview server in background
          pnpm exec vite preview --port 4173 --host 0.0.0.0 &
          PREVIEW_PID=$!
          
          # Wait for server to start
          echo "‚è≥ Waiting for preview server..."
          sleep 10
          
          # Test the build
          echo "üîç Testing application endpoints..."
          
          # Test main page
          if curl -sf http://localhost:4173/ > /dev/null; then
            echo "‚úÖ Main page loads successfully"
          else
            echo "‚ùå Main page failed to load"
            kill $PREVIEW_PID || true
            exit 1
          fi
          
          # Test that it's a React app
          if curl -s http://localhost:4173/ | grep -q "root"; then
            echo "‚úÖ React app structure detected"
          else
            echo "‚ùå React app structure not found"
            kill $PREVIEW_PID || true
            exit 1
          fi
          
          # Clean up
          kill $PREVIEW_PID || true
          echo "‚úÖ Build test completed successfully"

      - name: üì¶ Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.preflight.outputs.commit_hash }}
          path: dist/
          retention-days: 30

  # ========================================
  # DEPLOY TO AWS
  # ========================================
  deploy:
    name: üöÄ Deploy to AWS
    runs-on: ubuntu-latest
    needs: [preflight, build]
    if: needs.preflight.outputs.should_deploy == 'true'
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.preflight.outputs.commit_hash }}
          path: dist/

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-Deploy-${{ needs.preflight.outputs.commit_hash }}

      - name: üß™ Pre-Deploy AWS Verification
        run: |
          echo "üß™ AWS PRE-DEPLOYMENT VERIFICATION"
          echo "================================="
          
          # Verify AWS credentials
          echo "üîç Verifying AWS credentials..."
          aws sts get-caller-identity
          
          # Verify S3 bucket access
          echo "üîç Verifying S3 bucket access..."
          aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/ --region ${{ secrets.AWS_REGION }} || {
            echo "‚ùå Cannot access S3 bucket: ${{ secrets.S3_BUCKET_NAME }}"
            exit 1
          }
          echo "‚úÖ S3 bucket accessible"
          
          # Verify CloudFront distribution
          echo "üîç Verifying CloudFront distribution..."
          aws cloudfront get-distribution --id ${{ secrets.CLOUDFRONT_DIST_ID }} > /dev/null || {
            echo "‚ùå Cannot access CloudFront distribution: ${{ secrets.CLOUDFRONT_DIST_ID }}"
            exit 1
          }
          echo "‚úÖ CloudFront distribution accessible"

      - name: üöÄ Deploy to S3
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "üöÄ DEPLOYING TO S3"
          echo "=================="
          echo "Bucket: $BUCKET"
          echo "Region: $AWS_REGION"
          
          # Verify dist directory exists
          if [ ! -d "dist" ]; then
            echo "‚ùå dist directory not found after artifact download!"
            exit 1
          fi
          
          echo "üìÅ Files to deploy:"
          find dist -type f | head -10
          
          # Sync files to S3 with proper headers
          echo "üì§ Syncing files to S3..."
          aws s3 sync dist/ s3://$BUCKET/ \
            --delete \
            --exclude "*.map" \
            --cache-control "max-age=31536000" \
            --region $AWS_REGION
          
          # Set special headers for HTML files (no cache for SPA)
          echo "üìù Setting HTML file headers..."
          aws s3 cp dist/index.html s3://$BUCKET/index.html \
            --cache-control "max-age=0, no-cache, no-store, must-revalidate" \
            --content-type "text/html; charset=utf-8" \
            --region $AWS_REGION
          
          echo "‚úÖ S3 deployment completed"

      - name: üîß Setup SPA Routing
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "üîß SETTING UP SPA ROUTING"
          echo "========================"
          
          # Create SPA route copies for client-side routing
          ROUTES=("dashboard" "login" "admin" "profile")
          
          for route in "${ROUTES[@]}"; do
            echo "‚Üí Setting up /$route route..."
            
            # Create directory in S3
            aws s3 cp dist/index.html s3://$BUCKET/$route/index.html \
              --cache-control "max-age=0, no-cache, no-store, must-revalidate" \
              --content-type "text/html; charset=utf-8" \
              --region $AWS_REGION
            
            echo "‚úÖ /$route route configured"
          done

      - name: ‚òÅÔ∏è Update CloudFront Configuration
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          echo "‚òÅÔ∏è UPDATING CLOUDFRONT CONFIGURATION"
          echo "==================================="
          
          # Get current distribution config
          echo "üì• Getting current CloudFront configuration..."
          aws cloudfront get-distribution-config --id $DIST_ID > /tmp/cf-config.json
          
          # Extract ETag and configuration
          ETAG=$(jq -r '.ETag' /tmp/cf-config.json)
          echo "üè∑Ô∏è Current ETag: $ETAG"
          
          # Update configuration for SPA routing
          echo "üîß Updating configuration for SPA routing..."
          jq '.DistributionConfig | 
              .DefaultRootObject = "index.html" |
              .CustomErrorResponses = {
                "Quantity": 2,
                "Items": [
                  {
                    "ErrorCode": 403,
                    "ResponsePagePath": "/index.html", 
                    "ResponseCode": "200",
                    "ErrorCachingMinTTL": 10
                  },
                  {
                    "ErrorCode": 404,
                    "ResponsePagePath": "/index.html",
                    "ResponseCode": "200", 
                    "ErrorCachingMinTTL": 10
                  }
                ]
              }' /tmp/cf-config.json > /tmp/cf-updated.json
          
          # Apply configuration update
          echo "üì§ Applying CloudFront configuration update..."
          aws cloudfront update-distribution \
            --id $DIST_ID \
            --if-match $ETAG \
            --distribution-config file:///tmp/cf-updated.json
          
          echo "‚úÖ CloudFront configuration updated"

      - name: üîÑ CloudFront Cache Invalidation
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          echo "üîÑ CLOUDFRONT CACHE INVALIDATION"
          echo "==============================="
          
          # Create invalidation
          echo "üöÆ Creating cache invalidation..."
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $DIST_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "üÜî Invalidation ID: $INVALIDATION_ID"
          
          # Wait for invalidation to complete
          echo "‚è≥ Waiting for invalidation to complete..."
          aws cloudfront wait invalidation-completed \
            --distribution-id $DIST_ID \
            --id $INVALIDATION_ID
          
          echo "‚úÖ Cache invalidation completed"

      - name: üß™ Post-Deploy Verification
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          echo "üß™ POST-DEPLOYMENT VERIFICATION"
          echo "==============================="
          
          # Get CloudFront domain
          CF_DOMAIN=$(aws cloudfront get-distribution \
            --id $DIST_ID \
            --query 'Distribution.DomainName' \
            --output text)
          
          echo "üåê CloudFront Domain: $CF_DOMAIN"
          echo "üîó Full URL: https://$CF_DOMAIN"
          
          # Wait a moment for propagation
          echo "‚è≥ Waiting for CloudFront propagation..."
          sleep 30
          
          # Test main routes
          echo "üîç Testing application routes..."
          
          # Test root route
          if curl -sf "https://$CF_DOMAIN/" > /dev/null; then
            echo "‚úÖ Root route (/) - OK"
          else
            echo "‚ùå Root route (/) - FAILED"
            exit 1
          fi
          
          # Test SPA routes
          for route in "dashboard" "login"; do
            if curl -sf "https://$CF_DOMAIN/$route" > /dev/null; then
              echo "‚úÖ SPA route (/$route) - OK"
            else
              echo "‚ùå SPA route (/$route) - FAILED"
              exit 1
            fi
          done
          
          # Test that we get React app
          echo "üîç Verifying React app content..."
          if curl -s "https://$CF_DOMAIN/" | grep -q "root"; then
            echo "‚úÖ React app root element found"
          else
            echo "‚ùå React app root element not found"
            exit 1
          fi
          
          # Test API connectivity from deployed app
          echo "üîç Testing API connectivity..."
          if curl -sf "${{ env.API_ENDPOINT }}/health" > /dev/null; then
            echo "‚úÖ API endpoint accessible"
          else
            echo "‚ùå API endpoint not accessible"
            exit 1
          fi
          
          echo "‚úÖ All post-deployment tests passed!"

  # ========================================
  # DEPLOYMENT SUMMARY
  # ========================================
  summary:
    name: üìã Deployment Summary
    runs-on: ubuntu-latest
    needs: [preflight, build, deploy]
    if: always() && needs.preflight.outputs.should_deploy == 'true'
    
    steps:
      - name: üìä Generate Deployment Report
        env:
          DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          echo "üìã DEPLOYMENT SUMMARY REPORT"
          echo "============================"
          echo "üìÖ Date: $(date -u)"
          echo "üîó Commit: ${{ needs.preflight.outputs.commit_hash }}"
          echo "üè∑Ô∏è Build: ${{ needs.preflight.outputs.build_time }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo ""
          echo "üéØ DEPLOYMENT TARGETS"
          echo "====================="
          echo "ü™£ S3 Bucket: $BUCKET"
          echo "‚òÅÔ∏è CloudFront ID: $DIST_ID"
          echo "üåê Live URL: ${{ env.CLOUDFRONT_URL }}"
          echo "üì° API Endpoint: ${{ env.API_ENDPOINT }}"
          echo ""
          echo "‚úÖ DEPLOYMENT STATUS"
          echo "===================="
          if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ DEPLOYMENT SUCCESSFUL!"
            echo "üöÄ Application is live and ready for use"
            echo "üß™ Ready for manual testing and validation"
          else
            echo "‚ùå DEPLOYMENT FAILED!"
            echo "üîß Check logs above for error details"
            echo "üìû Contact development team for assistance"
          fi
          echo ""
          echo "üîó QUICK LINKS"
          echo "=============="
          echo "üåê Live App: ${{ env.CLOUDFRONT_URL }}"
          echo "üìä Dashboard: ${{ env.CLOUDFRONT_URL }}/dashboard"
          echo "üîê Login: ${{ env.CLOUDFRONT_URL }}/login"
          echo "üß™ Health Check: ${{ env.API_ENDPOINT }}/health"
          echo "üìã GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions"

      - name: üéâ Success Notification
        if: needs.build.result == 'success' && needs.deploy.result == 'success'
        run: |
          echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "===================================="
          echo "‚úÖ Build: Completed"
          echo "‚úÖ S3 Sync: Completed"
          echo "‚úÖ CloudFront: Updated & Invalidated"
          echo "‚úÖ SPA Routing: Configured"
          echo "‚úÖ Tests: All Passed"
          echo ""
          echo "üöÄ Your ACTA UI application is now live!"
          echo "üîó ${{ env.CLOUDFRONT_URL }}"

      - name: ‚ùå Failure Notification
        if: needs.build.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "‚ùå DEPLOYMENT FAILED!"
          echo "===================="
          echo "üîß Please check the logs above for detailed error information"
          echo "üìû Contact the development team if you need assistance"
          echo "üîÑ You can retry the deployment by pushing another commit or manually triggering this workflow"
