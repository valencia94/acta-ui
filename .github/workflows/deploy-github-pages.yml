name: Deploy to GitHub Pages (DISABLED)

# DISABLED: Use bulletproof-deploy.yml for AWS deployment instead
# This prevents duplicate deployments on every push
on:
  # push:
  #   branches: [develop]
  workflow_dispatch: {}

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🛠️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🛠️ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧼 Prettier format
        run: pnpm exec prettier --write .

      - name: 🧼 ESLint auto-fix
        run: pnpm exec eslint . --fix

      - name: 🔍 ESLint verify
        run: pnpm exec eslint .

      - name: 🧪 Lint + TS
        run: pnpm lint

      - name: ✅ Vitest unit tests
        run: pnpm run test:vitest -- --run --passWithNoTests

      - name: 🔨 Build React App
        env:
          # Use GitHub Pages URL for production build
          VITE_API_BASE_URL: "https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod"
        run: |
          # Set base path for GitHub Pages (repository name)
          echo "Building for GitHub Pages with base path: /acta-ui/"
          pnpm run build -- --base=/acta-ui/

      - name: 📋 Verify Build Output
        run: |
          echo "📋 VERIFYING BUILD OUTPUT"
          echo "========================"
          
          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "❌ dist directory not found!"
            exit 1
          fi
          
          # Check essential files
          echo "🔍 Checking essential files..."
          
          if [ ! -f "dist/index.html" ]; then
            echo "❌ index.html not found!"
            exit 1
          fi
          echo "✅ index.html found"
          
          # Check assets directory
          if [ ! -d "dist/assets" ]; then
            echo "❌ assets directory not found!"
            exit 1
          fi
          echo "✅ assets directory found"
          
          # Count files
          TOTAL_FILES=$(find dist -type f | wc -l)
          ASSET_FILES=$(find dist/assets -type f | wc -l)
          
          echo "📊 Build Statistics:"
          echo "   Total files: $TOTAL_FILES"
          echo "   Asset files: $ASSET_FILES"
          
          # List key files
          echo "📁 Key files:"
          ls -la dist/index.html
          ls -la dist/assets/ | head -5
          
          # Check file sizes
          echo "📏 File sizes:"
          du -sh dist/
          du -sh dist/assets/

      - name: 🛠️ Setup Pages
        uses: actions/configure-pages@v5

      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🧪 Post-Deployment Verification
        run: |
          echo "🧪 POST-DEPLOYMENT VERIFICATION"
          echo "==============================="
          
          # Get the Pages URL
          PAGES_URL="${{ steps.deployment.outputs.page_url }}"
          echo "🌐 GitHub Pages URL: $PAGES_URL"
          
          # Wait for deployment to propagate
          echo "⏳ Waiting for deployment propagation..."
          sleep 30
          
          # Test the deployment
          echo "🔍 Testing deployment..."
          
          # Test main page
          if curl -sf "$PAGES_URL" > /dev/null; then
            echo "✅ Main page accessible"
          else
            echo "❌ Main page not accessible"
            exit 1
          fi
          
          # Test SPA routes (should all return the same index.html)
          for route in "login" "dashboard"; do
            if curl -sf "${PAGES_URL}${route}" > /dev/null; then
              echo "✅ Route /${route} accessible"
            else
              echo "❌ Route /${route} not accessible"
            fi
          done
          
          echo "🎉 GitHub Pages deployment verified!"
