name: üöÄ ACTA-UI Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force full rebuild and deployment'
        required: false
        default: false
        type: boolean

# Prevent concurrent deployments
concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  # Production environment variables
  VITE_API_BASE_URL: 'https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod'
  VITE_COGNITO_REGION: 'us-east-2'
  VITE_COGNITO_POOL_ID: 'us-east-2_FyHLtOhiY'
  VITE_COGNITO_WEB_CLIENT: 'dshos5iou44tuach7ta3ici5m'
  VITE_SKIP_AUTH: 'false'
  VITE_USE_MOCK_API: 'false'
  # AWS Resources
  CLOUDFRONT_DISTRIBUTION: 'd7t9x3j66yd8k'
  S3_BUCKET: 'acta-ui-production'
  AWS_REGION: 'us-east-2'

jobs:
  build-and-deploy:
    name: üèóÔ∏è Build & Deploy Production
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
      
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9
          
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: üì¶ Install Dependencies
        run: |
          echo "üßπ Clearing caches..."
          rm -rf node_modules/.vite dist .cache
          pnpm install --frozen-lockfile
          
      - name: üîç Environment Verification
        run: |
          echo "üîç Verifying production environment..."
          echo "API Base URL: $VITE_API_BASE_URL"
          echo "Cognito Pool: $VITE_COGNITO_POOL_ID"
          echo "Skip Auth: $VITE_SKIP_AUTH"
          echo "Use Mock API: $VITE_USE_MOCK_API"
          
      - name: üèóÔ∏è Build Application
        run: |
          echo "üöÄ Building for production..."
          pnpm run build
          echo "‚úÖ Build completed!"
          
      - name: üß™ Build Verification
        run: |
          echo "üîç Verifying build output..."
          
          # Check document title
          if grep -q "Ikusi ¬∑ Acta Platform" dist/index.html; then
            echo "‚úÖ Document title correct"
          else
            echo "‚ùå Document title incorrect"
            exit 1
          fi
          
          # Check production API URL
          if grep -q "q2b9avfwv5.execute-api.us-east-2.amazonaws.com" dist/assets/*.js; then
            echo "‚úÖ Production API URL found"
          else
            echo "‚ùå Production API URL not found"
            exit 1
          fi
          
          # Verify no test/mock data
          if grep -r "test-project\|mock-project" dist/ 2>/dev/null; then
            echo "‚ùå Test data found in build"
            exit 1
          else
            echo "‚úÖ No test data in build"
          fi
          
          echo "üéØ Build verification passed!"
          
      - name: üîß Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: üì§ Deploy to S3
        run: |
          echo "üì§ Deploying to S3 bucket..."
          
          # Deploy build files to S3
          aws s3 sync dist/ s3://$S3_BUCKET/ \
            --delete \
            --cache-control "max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json"
          
          # Deploy HTML/JSON with no-cache
          aws s3 sync dist/ s3://$S3_BUCKET/ \
            --cache-control "max-age=0,no-cache,no-store,must-revalidate" \
            --include "*.html" \
            --include "*.json"
          
          echo "‚úÖ S3 deployment completed!"
          
      - name: üîÑ Invalidate CloudFront
        run: |
          echo "üîÑ Invalidating CloudFront cache..."
          
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "‚úÖ CloudFront invalidation created: $INVALIDATION_ID"
          
          # Wait for invalidation to complete
          echo "‚è≥ Waiting for cache invalidation..."
          aws cloudfront wait invalidation-completed \
            --distribution-id $CLOUDFRONT_DISTRIBUTION \
            --id $INVALIDATION_ID
          
          echo "‚úÖ CloudFront cache invalidated!"
          
      - name: üß™ Deployment Verification
        run: |
          echo "üß™ Verifying deployment..."
          
          # Wait for deployment to propagate
          sleep 30
          
          # Test main application
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://d7t9x3j66yd8k.cloudfront.net/)
          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Application accessible: HTTP $RESPONSE"
          else
            echo "‚ùå Application not accessible: HTTP $RESPONSE"
            exit 1
          fi
          
          # Test API connectivity with CORS
          CORS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Origin: https://d7t9x3j66yd8k.cloudfront.net" \
            -H "Access-Control-Request-Method: GET" \
            -X OPTIONS \
            https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod/health)
          
          if [ "$CORS_RESPONSE" = "200" ]; then
            echo "‚úÖ CORS configuration working: HTTP $CORS_RESPONSE"
          else
            echo "‚ùå CORS configuration issue: HTTP $CORS_RESPONSE"
            exit 1
          fi
          
          echo "üéØ Deployment verification passed!"
          
      - name: üéâ Deployment Success
        run: |
          echo "üéâ ACTA-UI Production Deployment Successful!"
          echo ""
          echo "üåê Live Application: https://d7t9x3j66yd8k.cloudfront.net"
          echo "üîå API Gateway: https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod"
          echo "üîê Authentication: AWS Cognito enabled"
          echo "üåç CORS: Properly configured"
          echo ""
          echo "‚úÖ Production deployment completed successfully!"

  smoke-tests:
    name: üß™ Production Smoke Tests
    needs: build-and-deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üß™ Run Smoke Tests
        run: |
          echo "üß™ Running production smoke tests..."
          
          # Test application loads
          RESPONSE=$(curl -s -w "%{http_code}\n" https://d7t9x3j66yd8k.cloudfront.net/ | tail -n1)
          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Application loads successfully"
          else
            echo "‚ùå Application failed to load: HTTP $RESPONSE"
            exit 1
          fi
          
          # Test API health endpoint
          API_RESPONSE=$(curl -s -w "%{http_code}\n" https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod/health | tail -n1)
          if [ "$API_RESPONSE" = "200" ] || [ "$API_RESPONSE" = "403" ]; then
            echo "‚úÖ API Gateway responding: HTTP $API_RESPONSE"
          else
            echo "‚ùå API Gateway not responding: HTTP $API_RESPONSE"
            exit 1
          fi
          
          echo "üéØ All smoke tests passed!"
