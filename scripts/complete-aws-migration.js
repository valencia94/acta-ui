#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Complete AWS SDK Migration');
console.log('============================\n');

// Step 1: Check current api.ts usage
const apiPath = path.join(__dirname, '..', 'src', 'lib', 'api.ts');
const apiBackupPath = path.join(__dirname, '..', 'src', 'lib', 'api.ts.backup');

if (!fs.existsSync(apiBackupPath) && fs.existsSync(apiPath)) {
  console.log('üìÑ Backing up original api.ts...');
  fs.copyFileSync(apiPath, apiBackupPath);
  console.log('‚úÖ Backup created: api.ts.backup');
}

// Step 2: Get all functions from old api.ts
console.log('\nüîç Analyzing old api.ts functions...');
const oldApiContent = fs.readFileSync(apiBackupPath || apiPath, 'utf8');
const exportedFunctions = oldApiContent.match(/export\s+(async\s+)?function\s+(\w+)/g) || [];
const functionNames = exportedFunctions.map(match => {
  const parts = match.split(/\s+/);
  return parts[parts.length - 1];
});

console.log(`Found ${functionNames.length} exported functions:`, functionNames);

// Step 3: Check which functions exist in awsDataService
const awsServicePath = path.join(__dirname, '..', 'src', 'lib', 'awsDataService.ts');
const awsServiceContent = fs.readFileSync(awsServicePath, 'utf8');

const missingFunctions = functionNames.filter(name => !awsServiceContent.includes(name));
if (missingFunctions.length > 0) {
  console.log('\n‚ö†Ô∏è  Functions in api.ts not found in awsDataService:');
  missingFunctions.forEach(fn => console.log(`   - ${fn}`));
}

// Step 4: Create the new api.ts wrapper
const newApiContent = `// API wrapper that now uses AWS SDK directly via awsDataService
// This maintains backward compatibility while switching to direct AWS access
// Auto-generated by complete-aws-migration.js

import * as awsDataService from './awsDataService';
import type { PMProject, ProjectSummary } from '../types';

// Re-export everything from awsDataService for backward compatibility
export * from './awsDataService';

// Re-export specific functions that components are using
export const {
  getAllProjects,
  getProjectsByPM,
  generateActaDocument,
  getDownloadUrl,
  checkDocumentAvailability,
  getPresignedUrl
} = awsDataService;

// Keep any additional types that were defined in the old api.ts
export interface TimelineEvent {
  hito: string;
  actividades: string;
  desarrollo: string;
  fecha: string;
}

export interface DocumentCheckResult {
  available: boolean;
  lastModified?: string;
  size?: number;
  s3Key?: string;
  error?: string;
}

// Re-export constants for backward compatibility
export const BASE = 'https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod';
export const S3_BUCKET = 'projectplace-dv-2025-x9a7b';
export const AWS_REGION = 'us-east-2';

${missingFunctions.length > 0 ? `
// TODO: These functions were in the old api.ts but not in awsDataService:
${missingFunctions.map(fn => `// - ${fn}`).join('\n')}
// You may need to implement them in awsDataService.ts or add them here
` : ''}

console.log('‚úÖ API module now using AWS SDK directly via awsDataService');
`;

// Step 5: Write the new api.ts
console.log('\nüìù Creating new api.ts wrapper...');
fs.writeFileSync(apiPath, newApiContent);
console.log('‚úÖ New api.ts created successfully');

// Step 6: Verify no components need updating
console.log('\nüîç Verifying component imports...');
const srcDir = path.join(__dirname, '..', 'src');
let componentsNeedingUpdate = 0;

function checkFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  if (content.includes("from './dataService'") || 
      content.includes('from "../dataService"') ||
      content.includes("from '@/lib/dataService'")) {
    console.log(`‚ùå ${path.relative(srcDir, filePath)} - still imports dataService`);
    componentsNeedingUpdate++;
  }
}

function walkDir(dir) {
  fs.readdirSync(dir).forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory() && !file.includes('node_modules')) {
      walkDir(filePath);
    } else if (stat.isFile() && (file.endsWith('.ts') || file.endsWith('.tsx'))) {
      checkFile(filePath);
    }
  });
}

walkDir(srcDir);

// Summary
console.log('\nüìä Migration Summary:');
console.log('====================');
console.log('‚úÖ api.ts now wraps awsDataService for backward compatibility');
console.log('‚úÖ Components can continue using existing imports');
console.log('‚úÖ All API calls will now use direct AWS SDK access');

if (missingFunctions.length > 0) {
  console.log(`\n‚ö†Ô∏è  Action Required:`);
  console.log(`   ${missingFunctions.length} functions need to be implemented in awsDataService.ts`);
}

if (componentsNeedingUpdate > 0) {
  console.log(`\n‚ö†Ô∏è  ${componentsNeedingUpdate} files still import old dataService`);
}

console.log('\nüéâ Migration complete! Your app now uses direct AWS SDK access.');
console.log('\nüìã Next steps:');
console.log('1. Test the application to ensure all functionality works');
console.log('2. Monitor the Network tab - you should see calls to:');
console.log('   - dynamodb.us-east-2.amazonaws.com (not execute-api)');
console.log('   - s3.us-east-2.amazonaws.com');
console.log('3. Run performance tests to verify improved speed');
