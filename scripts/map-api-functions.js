#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('🗺️  Mapping API Functions');
console.log('========================\n');

// Read the backup api.ts to find all functions
const apiBackupPath = path.join(__dirname, '..', 'src', 'lib', 'api.ts.backup');
const apiContent = fs.readFileSync(apiBackupPath, 'utf8');

// Find all exported functions (including arrow functions)
const functionPatterns = [
  /export\s+async\s+function\s+(\w+)/g,
  /export\s+function\s+(\w+)/g,
  /export\s+const\s+(\w+)\s*=\s*async/g,
  /export\s+const\s+(\w+)\s*=\s*\(/g,
  /export\s+const\s+(\w+)\s*:\s*[^=]+\s*=\s*async/g
];

const foundFunctions = new Set();

functionPatterns.forEach(pattern => {
  let match;
  while ((match = pattern.exec(apiContent)) !== null) {
    foundFunctions.add(match[1]);
  }
});

console.log(`Found ${foundFunctions.size} functions in api.ts:`);
foundFunctions.forEach(fn => console.log(`  - ${fn}`));

// Check which ones exist in awsDataService
const awsServicePath = path.join(__dirname, '..', 'src', 'lib', 'awsDataService.ts');
const awsServiceContent = fs.readFileSync(awsServicePath, 'utf8');

console.log('\n🔍 Checking availability in awsDataService.ts:');
const missingFunctions = [];
const availableFunctions = [];

foundFunctions.forEach(fn => {
  if (awsServiceContent.includes(`export`) && awsServiceContent.includes(fn)) {
    console.log(`  ✅ ${fn}`);
    availableFunctions.push(fn);
  } else {
    console.log(`  ❌ ${fn}`);
    missingFunctions.push(fn);
  }
});

// Extract the implementation of missing functions from api.ts
if (missingFunctions.length > 0) {
  console.log('\n📝 Extracting missing function implementations...\n');
  
  missingFunctions.forEach(fnName => {
    // Try to find the function implementation
    const patterns = [
      new RegExp(`export\\s+const\\s+${fnName}\\s*=\\s*async[^}]+}`, 'gs'),
      new RegExp(`export\\s+async\\s+function\\s+${fnName}[^}]+}`, 'gs'),
      new RegExp(`export\\s+const\\s+${fnName}\\s*:[^=]+=\\s*async[^}]+}`, 'gs')
    ];
    
    for (const pattern of patterns) {
      const match = apiContent.match(pattern);
      if (match) {
        console.log(`// ${fnName} implementation from api.ts:`);
        console.log(match[0]);
        console.log('\n---\n');
        break;
      }
    }
  });
}

// Generate the updated api.ts content
console.log('\n📄 Generating updated api.ts wrapper...\n');

const updatedApiContent = `// API wrapper that uses AWS SDK directly via awsDataService
// This maintains backward compatibility while switching to direct AWS access
// Auto-generated by map-api-functions.js

import * as awsDataService from './awsDataService';
import type { PMProject, ProjectSummary } from '../types';
${missingFunctions.includes('getCurrentUser') ? "import { getCurrentUser } from './api-amplify';" : ''}

// Re-export everything from awsDataService
export * from './awsDataService';

// Re-export available functions explicitly
export const {
${availableFunctions.map(fn => `  ${fn},`).join('\n')}
} = awsDataService;

// Types from original api.ts
export interface TimelineEvent {
  hito: string;
  actividades: string;
  desarrollo: string;
  fecha: string;
}

export interface DocumentCheckResult {
  available: boolean;
  lastModified?: string;
  size?: number;
  s3Key?: string;
  error?: string;
}

// Constants for backward compatibility
export const BASE = 'https://q2b9avfwv5.execute-api.us-east-2.amazonaws.com/prod';
export const S3_BUCKET = 'projectplace-dv-2025-x9a7b';
export const AWS_REGION = 'us-east-2';

${missingFunctions.includes('getCurrentUser') ? '// Re-export getCurrentUser from api-amplify\nexport { getCurrentUser };' : ''}

${missingFunctions.length > 0 ? `
// TODO: Implement these functions in awsDataService.ts:
${missingFunctions.filter(fn => fn !== 'getCurrentUser').map(fn => `// - ${fn}`).join('\n')}

// Temporary implementations (replace with awsDataService versions):
${missingFunctions.filter(fn => fn !== 'getCurrentUser').map(fn => `
export const ${fn} = async (...args: any[]) => {
  console.warn('${fn} needs to be implemented in awsDataService.ts');
  // Add temporary implementation or throw error
  throw new Error('${fn} not yet implemented in awsDataService');
};`).join('\n')}
` : ''}

console.log('✅ API module configured to use AWS SDK via awsDataService');
`;

// Save the mapping results
fs.writeFileSync(
  path.join(__dirname, '..', 'src', 'lib', 'api.ts'),
  updatedApiContent
);

console.log('✅ Updated api.ts with proper function mappings');

// Save a report
const reportPath = path.join(__dirname, 'api-migration-report.txt');
const report = `API Migration Report
===================
Date: ${new Date().toISOString()}

Functions found in api.ts: ${foundFunctions.size}
Available in awsDataService: ${availableFunctions.length}
Missing functions: ${missingFunctions.length}

Missing functions that need implementation:
${missingFunctions.map(fn => `- ${fn}`).join('\n')}

Next steps:
1. Implement missing functions in awsDataService.ts
2. Test all component functionality
3. Remove api.ts.backup once everything works
`;

fs.writeFileSync(reportPath, report);
console.log(`\n📊 Migration report saved to: ${reportPath}`);

