"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.list = void 0;
const utils_1 = require("@aws-amplify/core/internals/utils");
const utils_2 = require("../../utils");
const client_1 = require("../../utils/client");
const userAgent_1 = require("../../utils/userAgent");
const MAX_PAGE_SIZE = 1000;
const list = async (amplify, input) => {
    const { options = {}, prefix: path = '' } = input ?? {};
    const { s3Config, bucket, keyPrefix: prefix, } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, options);
    const listParams = {
        Bucket: bucket,
        Prefix: `${prefix}${path}`,
        MaxKeys: options?.listAll ? undefined : options?.pageSize,
        ContinuationToken: options?.listAll ? undefined : options?.nextToken,
    };
    return options.listAll
        ? await _listAll({ s3Config, listParams, prefix })
        : await _list({ s3Config, listParams, prefix });
};
exports.list = list;
const _listAll = async ({ s3Config, listParams, prefix, }) => {
    // TODO(ashwinkumar6) V6-logger: pageSize and nextToken aren't required when listing all items
    const listResult = [];
    let continuationToken = listParams.ContinuationToken;
    do {
        const { items: pageResults, nextToken: pageNextToken } = await _list({
            prefix,
            s3Config,
            listParams: {
                ...listParams,
                ContinuationToken: continuationToken,
                MaxKeys: MAX_PAGE_SIZE,
            },
        });
        listResult.push(...pageResults);
        continuationToken = pageNextToken;
    } while (continuationToken);
    return {
        items: listResult,
    };
};
const _list = async ({ s3Config, listParams, prefix, }) => {
    const listParamsClone = { ...listParams };
    if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {
        listParamsClone.MaxKeys = MAX_PAGE_SIZE;
        // TODO(ashwinkumar6) V6-logger: defaulting pageSize to ${MAX_PAGE_SIZE}.
    }
    const response = await (0, client_1.listObjectsV2)({
        ...s3Config,
        userAgentValue: (0, userAgent_1.getStorageUserAgentValue)(utils_1.StorageAction.List)
    }, listParamsClone);
    if (!response?.Contents) {
        return {
            items: [],
        };
    }
    const listResult = response.Contents.map(item => ({
        key: item.Key.substring(prefix.length),
        eTag: item.ETag,
        lastModified: item.LastModified,
        size: item.Size,
    }));
    return {
        items: listResult,
        nextToken: response.NextContinuationToken,
    };
};
