{"version":3,"sources":["../src/index.ts","../src/ui.ts","../src/validators/zod/index.ts","../src/validators/builtin/index.ts","../src/validators/standard/index.ts"],"sourcesContent":["import path from 'node:path'\nimport { cwd } from 'node:process'\nimport { createConfigLoader as createLoader } from 'unconfig'\nimport { type ConfigEnv, type Plugin, type UserConfig } from 'vite'\n\nimport { initUi, type UI } from './ui.js'\nimport { zodValidation } from './validators/zod/index.js'\nimport { builtinValidation } from './validators/builtin/index.js'\nimport { standardValidation } from './validators/standard/index.js'\nimport type { FullPluginOptions, PluginOptions, Schema } from './types.js'\n\n/**\n * Load schema defined in `env.ts` file using unconfig\n */\nasync function loadOptions(rootDir: string, inlineConfig?: PluginOptions) {\n  let source = 'env'\n\n  /**\n   * If configFile is defined in the inlineConfig, use it as the source\n   */\n  if (inlineConfig && 'configFile' in inlineConfig && inlineConfig.configFile) {\n    source = inlineConfig.configFile\n  }\n\n  const loader = createLoader<PluginOptions>({\n    sources: [{ files: source, extensions: ['ts', 'cts', 'mts', 'js', 'cjs', 'mjs'] }],\n    cwd: rootDir,\n    defaults: inlineConfig,\n    importx: { cache: false, loader: 'jiti' },\n  })\n\n  const result = await loader.load()\n  const config = result.config\n\n  if (!config) throw new Error('Missing configuration for vite-plugin-validate-env')\n\n  return config\n}\n\n/**\n * Returns the schema and the validator\n */\nfunction getNormalizedOptions(options: PluginOptions) {\n  let schema: Schema\n  let validator: FullPluginOptions['validator']\n  const isSchemaNested = 'schema' in options && 'validator' in options\n  if (isSchemaNested) {\n    schema = (options as any).schema\n    validator = (options as any).validator\n  } else {\n    validator = 'builtin'\n    schema = options\n  }\n\n  return { schema, validator }\n}\n\n/**\n * Log environment variables\n */\nfunction logVariables(ui: UI, variables: { key: string; value: any }[]) {\n  ui.logger.log(`${ui.colors.cyan('[vite-plugin-validate-env]')} debug process.env content`)\n\n  for (const { key, value } of variables) {\n    ui.logger.log(`${ui.icons.pointer} ${ui.colors.cyan(key)}: ${value}`)\n  }\n}\n\nfunction shouldLogVariables(options: PluginOptions) {\n  return 'debug' in options && options.debug === true\n}\n\n/**\n * Main function. Will call each validator defined in the schema and throw an error if any of them fails.\n */\nasync function validateEnv(\n  ui: UI,\n  userConfig: UserConfig,\n  envConfig: ConfigEnv,\n  inlineOptions?: PluginOptions,\n) {\n  /**\n   * Dynamic import of Vite helpers to using the ESM build of Vite and\n   * avoiding CJS since it will be deprecated\n   * See : https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated\n   */\n  const { normalizePath, loadEnv } = await import('vite')\n  const rootDir = userConfig.root || cwd()\n\n  const resolvedRoot = normalizePath(\n    userConfig.root ? path.resolve(userConfig.root) : process.cwd(),\n  )\n\n  const envDir = userConfig.envDir\n    ? normalizePath(path.resolve(resolvedRoot, userConfig.envDir))\n    : resolvedRoot\n\n  const env = loadEnv(envConfig.mode, envDir, userConfig.envPrefix)\n\n  const options = await loadOptions(rootDir, inlineOptions)\n  const variables = await validateAndLog(ui, env, options)\n\n  return {\n    define: variables.reduce(\n      (acc, { key, value }) => {\n        acc[`import.meta.env.${key}`] = JSON.stringify(value)\n        return acc\n      },\n      {} as Record<string, unknown>,\n    ),\n  }\n}\n\nasync function validateAndLog(ui: UI, env: Record<string, string>, options: PluginOptions) {\n  const { schema, validator } = getNormalizedOptions(options)\n  const showDebug = shouldLogVariables(options)\n  const validate = { zod: zodValidation, builtin: builtinValidation, standard: standardValidation }[\n    validator\n  ]\n\n  try {\n    const variables = await validate(ui, env, schema as any)\n\n    if (showDebug) logVariables(ui, variables)\n\n    return variables\n  } catch (error) {\n    if (showDebug) {\n      const variables = Object.entries(schema).map(([key]) => ({ key, value: env[key] }))\n      logVariables(ui, variables)\n    }\n\n    throw error\n  }\n}\n\n/**\n * Validate environment variables against a schema\n */\nexport const ValidateEnv = (options?: PluginOptions): Plugin => {\n  const ui = initUi()\n  return {\n    // @ts-expect-error - only used for testing as we need to keep each instance of the plugin unique to a test\n    ui: process.env.NODE_ENV === 'testing' ? ui : undefined,\n    name: 'vite-plugin-validate-env',\n    config: (config, env) => validateEnv(ui, config, env, options),\n  }\n}\n\nexport const defineConfig = <T extends PluginOptions>(config: T): T => config\n\nexport { schema as Schema } from '@poppinss/validator-lite'\nexport type { ImportMetaEnvAugmented } from './types.js'\n","import { cliui } from '@poppinss/cliui'\n\nexport type UI = ReturnType<typeof initUi>\n\nexport function initUi() {\n  return cliui({ mode: process.env.NODE_ENV === 'testing' ? 'raw' : 'normal' })\n}\n","import type { ZodSchema } from 'zod'\n\nimport type { UI } from '../../ui.js'\n\nexport function errorReporter(ui: UI, errors: any[]) {\n  let finalMessage = ui.colors.red('Failed to validate environment variables : \\n')\n\n  for (const error of errors) {\n    const errorKey = `[${ui.colors.magenta(error.key)}]`\n    finalMessage += `\\n${errorKey}: \\n`\n\n    const message = `Invalid value for \"${error.key}\" : ${error.err.issues[0].message}`\n    finalMessage += `  ${ui.colors.yellow(message)} \\n`\n  }\n\n  return finalMessage as string\n}\n\n/**\n * Validate the env values with Zod validator\n */\nexport async function zodValidation(ui: UI, env: Record<string, string>, schema: ZodSchema) {\n  const errors = []\n  const variables = []\n\n  for (const [key, validator] of Object.entries(schema!)) {\n    const result = validator.safeParse(env[key])\n\n    if (!result.success) {\n      errors.push({ key, err: result.error })\n      continue\n    }\n\n    // Handle undefined aka optional results\n    if (typeof result.data === 'undefined') continue\n\n    variables.push({ key, value: result.data })\n  }\n\n  if (errors.length) {\n    throw new Error(errorReporter(ui, errors))\n  }\n\n  return variables\n}\n","import type { UI } from '../../ui.js'\nimport type { PoppinsSchema } from '../../types.js'\n\nexport function errorReporter(ui: UI, errors: any[]) {\n  let finalMessage = ui.colors.red('Failed to validate environment variables : \\n')\n\n  for (const error of errors) {\n    const errorKey = `[${ui.colors.magenta(error.key)}]`\n    finalMessage += `\\n${errorKey}: \\n`\n\n    const message = error.err.message.replace(`${error.err.code}: `, '')\n    finalMessage += `  ${ui.colors.yellow(message)} \\n`\n  }\n\n  return finalMessage as string\n}\n\n/**\n * Validate the env values with builtin validator\n */\nexport function builtinValidation(ui: UI, env: Record<string, string>, schema: PoppinsSchema) {\n  const errors = []\n  const variables = []\n\n  for (const [key, validator] of Object.entries(schema!)) {\n    try {\n      const res = validator(key, env[key])\n\n      // Handle undefined aka optional results\n      if (typeof res === 'undefined') continue\n\n      variables.push({ key, value: res })\n    } catch (err) {\n      errors.push({ key, err })\n    }\n  }\n\n  if (errors.length) {\n    throw new Error(errorReporter(ui, errors))\n  }\n\n  return variables\n}\n","import type { UI } from '../../ui.js'\nimport type { StandardSchema } from '../../types.js'\n\nexport function errorReporter(ui: UI, errors: any[]) {\n  let finalMessage = ui.colors.red('Failed to validate environment variables : \\n')\n\n  for (const error of errors) {\n    const errorKey = `[${ui.colors.magenta(error.key)}]`\n    finalMessage += `\\n${errorKey}: \\n`\n\n    const message = `Invalid value for \"${error.key}\" : ${error.err.issues[0].message}`\n    finalMessage += `  ${ui.colors.yellow(message)} \\n`\n  }\n\n  return finalMessage as string\n}\n\nexport async function standardValidation(\n  ui: UI,\n  env: Record<string, string>,\n  schema: StandardSchema,\n) {\n  const errors = []\n  const variables = []\n\n  for (const [key, validator] of Object.entries(schema)) {\n    const result = await validator['~standard'].validate(env[key])\n\n    if (result.issues) {\n      errors.push({ key, err: result })\n      continue\n    }\n\n    variables.push({ key, value: result.value })\n  }\n\n  if (errors.length) {\n    throw new Error(errorReporter(ui, errors))\n  }\n\n  return variables\n}\n"],"mappings":"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","names":["schema","errorReporter","schema","errorReporter","schema","schema"]}