AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Conflict-free API Gateway wiring – route ACTA PM endpoints
  to the existing projectMetadataEnricher Lambda.

###############################################################################
# Parameters
###############################################################################
Parameters:
  ExistingApiId:
    Type: String
    Default: q2b9avfwv5
    Description: The already-created REST API ID

  ExistingApiRootResourceId:
    Type: String
    Default: kw8f8zihjg
    Description: Root resource ID of the existing API

  ProjectMetadataEnricherArn:
    Type: String
    Default: arn:aws:lambda:us-east-2:703671891952:function:projectMetadataEnricher
    Description: Lambda ARN that handles every real request

  ProjectMetadataEnricherFunctionName:
    Type: String
    Default: projectMetadataEnricher
    Description: Function name (for Lambda-Invoke permissions)

  DeploymentTimestamp:
    Type: String
    Default: "20250629-120000"
    Description: Bump this to force a new deployment

###############################################################################
# Re-usable snippets (via !Ref / !Sub only – no YAML merge-key tricks)
###############################################################################
Resources:

###############################################################################
# 1 ▸ API Gateway Resources (unique paths)
###############################################################################
  PMManagerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  pm-manager

  PMManagerAllProjectsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref PMManagerResource
      PathPart:  all-projects

  PMManagerByEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref PMManagerResource
      PathPart:  '{pmEmail}'

  ProjectsManagerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  projects

  DocumentValidatorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  document-validator

  DocumentValidatorIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref DocumentValidatorResource
      PathPart:  '{projectId}'

###############################################################################
# 2 ▸ Lambda-proxy GET / HEAD methods
###############################################################################
  # Helper for readability
  _LambdaProxyIntegration:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations
    Metadata: { Comment: Never deployed – just a source of Properties }

  PMManagerAllProjectsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      <<: *(_LambdaProxyIntegration.Properties)
      HttpMethod: GET
      ResourceId: !Ref PMManagerAllProjectsResource

  PMManagerByEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      <<: *(_LambdaProxyIntegration.Properties)
      HttpMethod: GET
      ResourceId: !Ref PMManagerByEmailResource

  ProjectsManagerMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      <<: *(_LambdaProxyIntegration.Properties)
      HttpMethod: GET
      ResourceId: !Ref ProjectsManagerResource

  DocumentValidatorGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      <<: *(_LambdaProxyIntegration.Properties)
      HttpMethod: GET
      ResourceId: !Ref DocumentValidatorIdResource

  DocumentValidatorHeadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      <<: *(_LambdaProxyIntegration.Properties)
      HttpMethod: HEAD
      ResourceId: !Ref DocumentValidatorIdResource

###############################################################################
# 3 ▸ Lightweight CORS OPTIONS methods (fully inlined, no alias refs)
###############################################################################
  PMManagerOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMManagerResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false

  PMManagerAllProjectsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMManagerAllProjectsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false

  PMManagerByEmailOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMManagerByEmailResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false

  ProjectsManagerOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectsManagerResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false

  DocumentValidatorOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false

  DocumentValidatorIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false

###############################################################################
# 4 ▸ Lambda-Invoke permissions (one per real method)
###############################################################################
  PMManagerAllProjectsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:  lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/all-projects

  PMManagerByEmailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:  lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/*

  ProjectsManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:  lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/projects

  DocumentValidatorGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:  lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/document-validator/*

  DocumentValidatorHeadPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:  lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/HEAD/document-validator/*

###############################################################################
# 5 ▸ API Gateway Deployment & Stage
###############################################################################
  ConflictFreeApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PMManagerAllProjectsMethod
      - PMManagerByEmailMethod
      - ProjectsManagerMethod
      - DocumentValidatorGetMethod
      - DocumentValidatorHeadMethod
      - PMManagerOptionsMethod
      - PMManagerAllProjectsOptionsMethod
      - PMManagerByEmailOptionsMethod
      - ProjectsManagerOptionsMethod
      - DocumentValidatorOptionsMethod
      - DocumentValidatorIdOptionsMethod
    Properties:
      RestApiId: !Ref ExistingApiId
      Description: !Sub "Conflict-free deployment ${DeploymentTimestamp}"

  ConflictFreeProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ConflictFreeApiGatewayDeployment
      RestApiId:    !Ref ExistingApiId
      StageName:    prod
      Description:  !Sub "Prod stage ${DeploymentTimestamp}"

###############################################################################
# 6 ▸ Outputs
###############################################################################
Outputs:
  APIGatewayId:
    Description: API ID
    Value: !Ref ExistingApiId

  StageId:
    Description: Stage resource ID
    Value: !Ref ConflictFreeProdStage

  ProjectsEndpoint:
    Description: GET /projects
    Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/projects"

  PMAllProjectsEndpoint:
    Description: GET /pm-manager/all-projects
    Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/pm-manager/all-projects"

  DocumentValidatorEndpoint:
    Description: GET /document-validator/{projectId}
    Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/document-validator/{projectId}"
