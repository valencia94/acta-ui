AWSTemplateFormatVersion: '2010-09-09'
Description: Conflict-free API – core PM routes plus UI-alias paths

###############################################################################
# Parameters
###############################################################################
Parameters:
  ExistingApiId:               { Type: String, Default: q2b9avfwv5 }
  ExistingApiRootResourceId:   { Type: String, Default: kw8f8zihjg }
  ProjectMetadataEnricherArn:  { Type: String, Default: arn:aws:lambda:us-east-2:703671891952:function:projectMetadataEnricher }
  ProjectMetadataEnricherFunctionName: { Type: String, Default: projectMetadataEnricher }
  DeploymentTimestamp:         { Type: String, Default: "20250629-000000" }

###############################################################################
# Helper – CORS MOCK snippet
###############################################################################
Mappings:
  CorsHeaders:
    Default:
      AllowOrigin:  "'*'"
      AllowMethods: "'GET,HEAD,OPTIONS'"
      AllowHeaders: "'*'"

###############################################################################
# Core resources (pm-manager, projects-manager, document-validator,
#                 direct /projectMetadataEnricher proxy)
###############################################################################
Resources:

  PMManagerResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: pm-manager }

  PMManagerAllProjectsResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref PMManagerResource, PathPart: all-projects }

  PMManagerByEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref PMManagerResource, PathPart: '{pmEmail}' }

  DocumentValidatorResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: document-validator }

  DocumentValidatorIdResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref DocumentValidatorResource, PathPart: '{projectId}' }

  ProjectsManagerResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: projects-manager }

  ProjectMetadataEnricherResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: projectMetadataEnricher }

###############################################################################
# UI-alias resources
###############################################################################
  ProjectsAliasResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: projects }

  PMProjectsRootResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: pm-projects }

  PMProjectsAllAliasResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref PMProjectsRootResource, PathPart: all-projects }

  PMProjectsByEmailAliasResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref PMProjectsRootResource, PathPart: '{pmEmail}' }

  CheckDocRootAliasResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: check-document }

  CheckDocIdAliasResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref CheckDocRootAliasResource, PathPart: '{projectId}' }

###############################################################################
# Lambda-proxy methods ─ 12 total (7 core + 5 alias)
###############################################################################
  # core GET/HEAD/ANY
  PMManagerAllProjectsMethod:           &LambdaProxyMethod
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref PMManagerAllProjectsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration: { Type: AWS_PROXY, IntegrationHttpMethod: POST,
                     Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations }

  PMManagerByEmailMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyMethod.Properties
      ResourceId: !Ref PMManagerByEmailResource

  ProjectsManagerMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyMethod.Properties
      ResourceId: !Ref ProjectsManagerResource

  DocumentValidatorGetMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyMethod.Properties
      ResourceId: !Ref DocumentValidatorIdResource

  DocumentValidatorHeadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorIdResource
      HttpMethod: HEAD
      AuthorizationType: NONE
      Integration: { Type: AWS_PROXY, IntegrationHttpMethod: POST,
                     Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations }

  ProjectMetadataEnricherMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref ProjectMetadataEnricherResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration: { Type: AWS_PROXY, IntegrationHttpMethod: POST,
                     Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations }

  # alias
  ProjectsAliasMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyMethod.Properties
      ResourceId: !Ref ProjectsAliasResource

  PMProjectsAllAliasMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyMethod.Properties
      ResourceId: !Ref PMProjectsAllAliasResource

  PMProjectsByEmailAliasMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyMethod.Properties
      ResourceId: !Ref PMProjectsByEmailAliasResource

  CheckDocGetAliasMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyMethod.Properties
      ResourceId: !Ref CheckDocIdAliasResource

  CheckDocHeadAliasMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref CheckDocIdAliasResource
      HttpMethod: HEAD
      AuthorizationType: NONE
      Integration: { Type: AWS_PROXY, IntegrationHttpMethod: POST,
                     Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations }

###############################################################################
# OPTIONS (CORS) – 17 total (7 core + 5 alias + 5 alias parents)
###############################################################################
  # helper macro for CORS mock
  # (YAML anchor reused for every path – avoids copy-paste errors)
  CorsMock: &Cors
    AuthorizationType: NONE
    HttpMethod: OPTIONS
    Integration:
      Type: MOCK
      RequestTemplates: { "application/json": "{\"statusCode\": 200}" }
      IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  !FindInMap [CorsHeaders, Default, AllowOrigin]
            method.response.header.Access-Control-Allow-Methods: !FindInMap [CorsHeaders, Default, AllowMethods]
            method.response.header.Access-Control-Allow-Headers: !FindInMap [CorsHeaders, Default, AllowHeaders]
    MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin:  true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Headers: true

  # Core OPTIONS  (7)
  PMManagerOptionsMethod:             { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref PMManagerResource,             <<: *Cors } }
  PMManagerAllProjectsOptionsMethod:  { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref PMManagerAllProjectsResource, <<: *Cors } }
  PMManagerByEmailOptionsMethod:      { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref PMManagerByEmailResource,     <<: *Cors } }
  DocumentValidatorOptionsMethod:     { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref DocumentValidatorResource,   <<: *Cors } }
  DocumentValidatorIdOptionsMethod:   { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref DocumentValidatorIdResource, <<: *Cors } }
  ProjectsManagerOptionsMethod:       { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref ProjectsManagerResource,     <<: *Cors } }
  ProjectMetadataEnricherOptionsMethod:{ Type: AWS::ApiGateway::Method, Properties:{ RestApiId: !Ref ExistingApiId, ResourceId: !Ref ProjectMetadataEnricherResource, <<: *Cors } }

  # Alias OPTIONS  (10)
  ProjectsAliasOptions:               { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref ProjectsAliasResource,      <<: *Cors } }
  PMProjectsRootOptions:              { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref PMProjectsRootResource,     <<: *Cors } }
  PMProjectsAllAliasOptions:          { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref PMProjectsAllAliasResource, <<: *Cors } }
  PMProjectsByEmailAliasOptions:      { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref PMProjectsByEmailAliasResource, <<: *Cors } }
  CheckDocRootAliasOptions:           { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref CheckDocRootAliasResource,  <<: *Cors } }
  CheckDocAliasOptions:               { Type: AWS::ApiGateway::Method, Properties: { RestApiId: !Ref ExistingApiId, ResourceId: !Ref CheckDocIdAliasResource,    <<: *Cors } }

###############################################################################
# Lambda-invoke permissions (12)
###############################################################################
  PMManagerAllProjectsPermission:      &PermCore
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/all-projects

  PMManagerByEmailPermission:
    <<: *PermCore
    Properties:
      <<: *PermCore.Properties
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/*

  ProjectsManagerPermission:
    <<: *PermCore
    Properties:
      <<: *PermCore.Properties
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/projects-manager

  DocumentValidatorGetPermission:
    <<: *PermCore
    Properties:
      <<: *PermCore.Properties
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/document-validator/*

  DocumentValidatorHeadPermission:
    <<: *PermCore
    Properties:
      <<: *PermCore.Properties
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/HEAD/document-validator/*

  ProjectMetadataEnricherPermission:
    <<: *PermCore
    Properties:
      <<: *PermCore.Properties
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/*/projectMetadataEnricher

  # alias perms
  ProjectsAliasPermission:
    <<: *PermCore
    Properties:
      <<: *PermCore.Properties
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/projects

  PMProjectsAllAliasPermission:
    <<: *PermCore
    Properties:
      <<: *PermCore.Properties
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-projects/all-projects

  PMProjectsByEmailAliasPermission:
    <<: *PermCore
    Properties:
      <<: *PermCore.Properties
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-projects/*

  CheckDocGetAliasPermission:
    <<: *PermCore
    Properties:
      <<: *PermCore.Properties
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/check-document/*

  CheckDocHeadAliasPermission:
    <<: *PermCore
    Properties:
      <<: *PermCore.Properties
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/HEAD/check-document/*

  # optional: root/pm-projects OPTIONS needs invoke too (not required)

###############################################################################
# Deployment & Stage
###############################################################################
  ConflictFreeApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      # 12 proxy
      - PMManagerAllProjectsMethod
      - PMManagerByEmailMethod
      - ProjectsManagerMethod
      - DocumentValidatorGetMethod
      - DocumentValidatorHeadMethod
      - ProjectMetadataEnricherMethod
      - ProjectsAliasMethod
      - PMProjectsAllAliasMethod
      - PMProjectsByEmailAliasMethod
      - CheckDocGetAliasMethod
      - CheckDocHeadAliasMethod
      # 17 OPTIONS
      - PMManagerOptionsMethod
      - PMManagerAllProjectsOptionsMethod
      - PMManagerByEmailOptionsMethod
      - DocumentValidatorOptionsMethod
      - DocumentValidatorIdOptionsMethod
      - ProjectsManagerOptionsMethod
      - ProjectMetadataEnricherOptionsMethod
      - ProjectsAliasOptions
      - PMProjectsRootOptions
      - PMProjectsAllAliasOptions
      - PMProjectsByEmailAliasOptions
      - CheckDocRootAliasOptions
      - CheckDocAliasOptions
      # Resources
      - PMManagerResource
      - DocumentValidatorResource
      - ProjectsManagerResource
      - ProjectMetadataEnricherResource
      - ProjectsAliasResource
      - PMProjectsRootResource
      - CheckDocRootAliasResource
    Properties:
      RestApiId: !Ref ExistingApiId
      Description: !Sub "Conflict-free deployment ${DeploymentTimestamp}"

  ConflictFreeProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ConflictFreeApiGatewayDeployment
      RestApiId:    !Ref ExistingApiId
      StageName:    prod
      Description:  !Sub "Prod stage ${DeploymentTimestamp}"

###############################################################################
# Outputs
###############################################################################
Outputs:
  APIGatewayId:  { Value: !Ref ExistingApiId }
  DeploymentId:  { Value: !Ref ConflictFreeApiGatewayDeployment }
  StageId:       { Value: !Ref ConflictFreeProdStage }
  ProjectsEndpoint:          { Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/projects" }
  PMProjectsAllEndpoint:     { Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/pm-projects/all-projects" }
  CheckDocumentEndpoint:     { Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/check-document/{projectId}" }
