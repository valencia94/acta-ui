AWSTemplateFormatVersion: '2010-09-09'
Description: Conflict-free wiring – route all PM endpoints to projectMetadataEnricher

###############################################################################
# Parameters
###############################################################################
Parameters:
  ExistingApiId:
    Type:       String
    Default:    q2b9avfwv5
    Description: Already-provisioned REST API ID

  ExistingApiRootResourceId:
    Type:       String
    Default:    kw8f8zihjg
    Description: Root resource of the same REST API

  ProjectMetadataEnricherArn:
    Type:       String
    Default:    arn:aws:lambda:us-east-2:703671891952:function:projectMetadataEnricher
    Description: Lambda that answers *all* of the new endpoints

  ProjectMetadataEnricherFunctionName:
    Type:       String
    Default:    projectMetadataEnricher
    Description: Short name for Lambda permissions

  DeploymentTimestamp:
    Type:       String
    Default:    "20250629-110000"
    Description: Forces a fresh API-Gateway deployment

###############################################################################
# Shorthand YAML anchors
###############################################################################
Mappings: {}

# one CORS OPTIONS “mock” – reused everywhere
CorsOptionsMethod: &CorsOptionsMethod
  Type: AWS::ApiGateway::Method
  Properties:
    AuthorizationType: NONE
    HttpMethod: OPTIONS
    Integration:
      Type: MOCK
      RequestTemplates:
        application/json: '{"statusCode":200}'
      IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  "'*'"
            method.response.header.Access-Control-Allow-Headers: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
    MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin:  true
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true

# Lambda-proxy generator (will be extended per-method)
_LambdaProxyIntegration: &LambdaProxyIntegration
  Type: AWS::ApiGateway::Method
  Properties:
    AuthorizationType: NONE
    Integration:
      Type: AWS_PROXY
      IntegrationHttpMethod: POST
      Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

###############################################################################
# Resources – tree mirrors the frontend expectations
###############################################################################
Resources:

# ─── /projects (alias for GET list) ──────────────────────────────────────────
  ProjectsAliasResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: projects }

  ProjectsAliasMethod:
    <<: *LambdaProxyIntegration
    Properties:
      <<: *LambdaProxyIntegration.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectsAliasResource
      HttpMethod: GET

  ProjectsAliasOptions:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectsAliasResource

# ─── /pm-manager ────────────────────────────────────────────────────────────
  PMManagerResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: pm-manager }

  PMManagerOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMManagerResource

  # /pm-manager/all-projects
  PMManagerAllProjectsResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref PMManagerResource, PathPart: all-projects }

  PMManagerAllProjectsMethod:
    <<: *LambdaProxyIntegration
    Properties:
      <<: *LambdaProxyIntegration.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMManagerAllProjectsResource
      HttpMethod: GET

  PMManagerAllProjectsOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMManagerAllProjectsResource

  # /pm-manager/{pmEmail}
  PMManagerByEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref PMManagerResource, PathPart: '{pmEmail}' }

  PMManagerByEmailMethod:
    <<: *LambdaProxyIntegration
    Properties:
      <<: *LambdaProxyIntegration.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMManagerByEmailResource
      HttpMethod: GET

  PMManagerByEmailOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMManagerByEmailResource

# ─── /document-validator ────────────────────────────────────────────────────
  DocumentValidatorResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: document-validator }

  DocumentValidatorOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorResource

  # /document-validator/{projectId}
  DocumentValidatorIdResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref DocumentValidatorResource, PathPart: '{projectId}' }

  DocumentValidatorGetMethod:
    <<: *LambdaProxyIntegration
    Properties:
      <<: *LambdaProxyIntegration.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorIdResource
      HttpMethod: GET

  DocumentValidatorHeadMethod:
    <<: *LambdaProxyIntegration
    Properties:
      <<: *LambdaProxyIntegration.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorIdResource
      HttpMethod: HEAD

  DocumentValidatorIdOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorIdResource

# ─── Direct Lambda “escape hatch” (/projectMetadataEnricher) ────────────────
  ProjectMetadataEnricherResource:
    Type: AWS::ApiGateway::Resource
    Properties: { RestApiId: !Ref ExistingApiId, ParentId: !Ref ExistingApiRootResourceId, PathPart: projectMetadataEnricher }

  ProjectMetadataEnricherMethod:
    <<: *LambdaProxyIntegration
    Properties:
      <<: *LambdaProxyIntegration.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectMetadataEnricherResource
      HttpMethod: ANY   # allows direct test calls

  ProjectMetadataEnricherOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectMetadataEnricherResource

###############################################################################
# Lambda-invoke permissions (six total)
###############################################################################
  PMManagerAllProjectsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn:    !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/all-projects

  PMManagerByEmailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn:    !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/*

  ProjectsManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn:    !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/projects

  DocumentValidatorGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn:    !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/document-validator/*

  DocumentValidatorHeadPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn:    !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/HEAD/document-validator/*

  ProjectMetadataEnricherPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn:    !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/*/projectMetadataEnricher

###############################################################################
# Deployment & Stage – every method listed in DependsOn
###############################################################################
  ConflictFreeApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      # 8 Lambda-proxy methods
      - PMManagerAllProjectsMethod
      - PMManagerByEmailMethod
      - ProjectsAliasMethod
      - DocumentValidatorGetMethod
      - DocumentValidatorHeadMethod
      - ProjectMetadataEnricherMethod
      # 8 OPTIONS mocks
      - PMManagerOptionsMethod
      - PMManagerAllProjectsOptionsMethod
      - PMManagerByEmailOptionsMethod
      - ProjectsAliasOptions
      - DocumentValidatorOptionsMethod
      - DocumentValidatorIdOptionsMethod
      - ProjectMetadataEnricherOptionsMethod
      - CorsOptionsMethod                      # anchor target counts too
    Properties:
      RestApiId: !Ref ExistingApiId
      Description: !Sub "Conflict-free deployment ${DeploymentTimestamp}"

  ConflictFreeProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ConflictFreeApiGatewayDeployment
      RestApiId:    !Ref ExistingApiId
      StageName:    prod
      Description:  !Sub "Prod stage ${DeploymentTimestamp}"

###############################################################################
# Outputs
###############################################################################
Outputs:
  APIGatewayId:            { Value: !Ref ExistingApiId }
  DeploymentId:            { Value: !Ref ConflictFreeApiGatewayDeployment }
  StageId:                 { Value: !Ref ConflictFreeProdStage }
  HealthEndpoint:          { Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/health" }
  MetadataEnricherEndpoint:{ Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/projectMetadataEnricher" }
