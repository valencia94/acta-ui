AWSTemplateFormatVersion: '2010-09-09'
Description: CONFLICT-FREE API Gateway wiring (PM endpoints → projectMetadataEnricher)

###############################################################################
# Parameters
###############################################################################
Parameters:
  ExistingApiId:
    Type: String
    Default: q2b9avfwv5
  ExistingApiRootResourceId:
    Type: String
    Default: kw8f8zihjg
  ProjectMetadataEnricherArn:
    Type: String
    Default: arn:aws:lambda:us-east-2:703671891952:function:projectMetadataEnricher
  ProjectMetadataEnricherFunctionName:
    Type: String
    Default: projectMetadataEnricher
  DeploymentTimestamp:
    Type: String
    Default: "20250629-000000"

###############################################################################
# API Gateway resources
###############################################################################
Resources:

  # ─── PM-Manager hierarchy ───────────────────────────────────
  PMManagerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  pm-manager

  PMManagerAllProjectsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref PMManagerResource
      PathPart:  all-projects

  PMManagerByEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref PMManagerResource
      PathPart:  '{pmEmail}'

  # ─── Document-Validator hierarchy ───────────────────────────
  DocumentValidatorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  document-validator

  DocumentValidatorIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref DocumentValidatorResource
      PathPart:  '{projectId}'

  # ─── Projects-Manager path ──────────────────────────────────
  ProjectsManagerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  projects-manager

  # ─── NEW  /projectMetadataEnricher ──────────────────────────
  ProjectMetadataEnricherResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  projectMetadataEnricher

  # ─── NEW  /health ───────────────────────────────────────────
  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  health

###############################################################################
# Lambda-proxy methods
###############################################################################
  # PM-Manager
  PMManagerAllProjectsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref PMManagerAllProjectsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  PMManagerByEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref PMManagerByEmailResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  # Projects-Manager
  ProjectsManagerMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref ProjectsManagerResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  # Document-Validator
  DocumentValidatorGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  DocumentValidatorHeadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorIdResource
      HttpMethod: HEAD
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  # NEW  ANY /projectMetadataEnricher
  ProjectMetadataEnricherMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref ProjectMetadataEnricherResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  # NEW  GET /health
  HealthGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

###############################################################################
# MOCK OPTIONS (explicit, duplicated — no macro)
###############################################################################
  PMManagerOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref PMManagerResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,ANY'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  PMManagerAllProjectsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref PMManagerAllProjectsResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,ANY'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  PMManagerByEmailOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref PMManagerByEmailResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,ANY'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  DocumentValidatorOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,ANY'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  DocumentValidatorIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref DocumentValidatorIdResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,ANY'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  ProjectsManagerOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref ProjectsManagerResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,ANY'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  ProjectMetadataEnricherOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref ProjectMetadataEnricherResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,ANY'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  HealthOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:  !Ref ExistingApiId
      ResourceId: !Ref HealthResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:  "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,ANY'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:  true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

###############################################################################
# Lambda permissions (5 original + 2 new)
###############################################################################
  PMManagerAllProjectsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/all-projects

  PMManagerByEmailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/*

  ProjectsManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/projects-manager

  DocumentValidatorGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/document-validator/*

  DocumentValidatorHeadPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/HEAD/document-validator/*

  ProjectMetadataEnricherPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/*/projectMetadataEnricher

  HealthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProjectMetadataEnricherFunctionName
      Action:       lambda:InvokeFunction
      Principal:    apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/health

###############################################################################
# Deployment & Stage
###############################################################################
  ConflictFreeApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      # 7 Lambda-proxy methods
      - PMManagerAllProjectsMethod
      - PMManagerByEmailMethod
      - ProjectsManagerMethod
      - DocumentValidatorGetMethod
      - DocumentValidatorHeadMethod
      - ProjectMetadataEnricherMethod
      - HealthGetMethod
      # 8 OPTIONS methods
      - PMManagerOptionsMethod
      - PMManagerAllProjectsOptionsMethod
      - PMManagerByEmailOptionsMethod
      - DocumentValidatorOptionsMethod
      - DocumentValidatorIdOptionsMethod
      - ProjectsManagerOptionsMethod
      - ProjectMetadataEnricherOptionsMethod
      - HealthOptionsMethod
      # 5 resources
      - PMManagerResource
      - DocumentValidatorResource
      - ProjectsManagerResource
      - ProjectMetadataEnricherResource
      - HealthResource
    Properties:
      RestApiId: !Ref ExistingApiId
      Description: !Sub "Conflict-free deployment ${DeploymentTimestamp}"

  ConflictFreeProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ConflictFreeApiGatewayDeployment
      RestApiId:    !Ref ExistingApiId
      StageName:    prod
      Description:  !Sub "Prod stage ${DeploymentTimestamp}"

###############################################################################
# Outputs
###############################################################################
Outputs:
  APIGatewayId:
    Description: API ID
    Value: !Ref ExistingApiId

  DeploymentId:
    Description: Deployment ID
    Value: !Ref ConflictFreeApiGatewayDeployment

  StageId:
    Description: Stage ID
    Value: !Ref ConflictFreeProdStage

  HealthEndpoint:
    Description: Health check URL
    Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/health"

  MetadataEnricherEndpoint:
    Description: Direct proxy
    Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/projectMetadataEnricher"
