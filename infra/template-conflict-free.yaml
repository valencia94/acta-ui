AWSTemplateFormatVersion: '2010-09-09'
Description: Conflict-free API wiring - route all PM endpoints to projectMetadataEnricher

###############################################################################
# PARAMETERS
###############################################################################
Parameters:
  ExistingApiId:
    Type: String
    Default: q2b9avfwv5
  ExistingApiRootResourceId:
    Type: String
    Default: kw8f8zihjg
  ProjectMetadataEnricherArn:
    Type: String
    Default: arn:aws:lambda:us-east-2:703671891952:function:projectMetadataEnricher
  ProjectMetadataEnricherFunctionName:
    Type: String
    Default: projectMetadataEnricher
  DeploymentTimestamp:
    Type: String
    Default: "20250629-120000"

###############################################################################
# ⛩️  REUSABLE METHOD DEFINITIONS (YAML anchors)
###############################################################################
# 1. Lambda-proxy for GET / HEAD
LambdaProxyMethod: &LambdaProxyMethod
  Type: AWS::ApiGateway::Method
  Properties: &LambdaProxyProps
    RestApiId: !Ref ExistingApiId
    AuthorizationType: NONE
    HttpMethod: GET                # ← overridden per-method when merged
    Integration:
      Type: AWS_PROXY
      IntegrationHttpMethod: POST
      Uri: !Sub >
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations
    MethodResponses:
      - StatusCode: 200

# 2. CORS /OPTIONS (MOCK integration)
CorsOptionsMethod: &CorsOptionsMethod
  Type: AWS::ApiGateway::Method
  Properties:
    RestApiId: !Ref ExistingApiId
    AuthorizationType: NONE
    HttpMethod: OPTIONS
    Integration:
      Type: MOCK
      RequestTemplates:
        application/json: '{ "statusCode" : 200 }'
      IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
    MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Headers: false

###############################################################################
# 📁 RESOURCES — 3 feature groups + 2 aliases + check-doc
###############################################################################
Resources:

# ── 1. /projects-manager (direct) ────────────────────────────────────────────
  ProjectsManagerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  projects-manager

  ProjectsManagerMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyProps
      ResourceId: !Ref ProjectsManagerResource
      HttpMethod: GET

  ProjectsManagerOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref ProjectsManagerResource

# ── 2. /pm-manager/{…} -------------------------------------------------------
  PMManagerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  pm-manager

  PMManagerOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref PMManagerResource

  PMManagerAllProjectsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref PMManagerResource
      PathPart:  all-projects

  PMManagerAllProjectsMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyProps
      ResourceId: !Ref PMManagerAllProjectsResource
      HttpMethod: GET

  PMManagerAllProjectsOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref PMManagerAllProjectsResource

  PMManagerByEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref PMManagerResource
      PathPart: '{pmEmail}'

  PMManagerByEmailMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyProps
      ResourceId: !Ref PMManagerByEmailResource
      HttpMethod: GET

  PMManagerByEmailOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref PMManagerByEmailResource

# ── 3. /document-validator/{id} ---------------------------------------------
  DocumentValidatorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  document-validator

  DocumentValidatorOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref DocumentValidatorResource

  DocumentValidatorIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref DocumentValidatorResource
      PathPart: '{projectId}'

  DocumentValidatorGetMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyProps
      ResourceId: !Ref DocumentValidatorIdResource
      HttpMethod: GET

  DocumentValidatorHeadMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyProps
      ResourceId: !Ref DocumentValidatorIdResource
      HttpMethod: HEAD

  DocumentValidatorIdOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref DocumentValidatorIdResource

# ── 4. /projects (alias → projects-manager) ----------------------------------
  ProjectsAliasResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart:  projects

  ProjectsAliasMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyProps
      ResourceId: !Ref ProjectsAliasResource
      HttpMethod: GET

  ProjectsAliasOptions:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref ProjectsAliasResource

# ── 5. /pm-projects (alias → pm-manager) ------------------------------------
  PMProjectsRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart: pm-projects

  PMProjectsRootOptions:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref PMProjectsRootResource

  PMProjectsAllAliasResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref PMProjectsRootResource
      PathPart: all-projects

  PMProjectsAllAliasMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyProps
      ResourceId: !Ref PMProjectsAllAliasResource
      HttpMethod: GET

  PMProjectsAllAliasOptions:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref PMProjectsAllAliasResource

  PMProjectsByEmailAliasResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref PMProjectsRootResource
      PathPart: '{pmEmail}'

  PMProjectsByEmailAliasMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyProps
      ResourceId: !Ref PMProjectsByEmailAliasResource
      HttpMethod: GET

  PMProjectsByEmailAliasOptions:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref PMProjectsByEmailAliasResource

# ── 6. /projectMetadataEnricher (direct Lambda passthrough) ------------------
  ProjectMetadataEnricherResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId:  !Ref ExistingApiRootResourceId
      PathPart: projectMetadataEnricher

  ProjectMetadataEnricherMethod:
    <<: *LambdaProxyMethod
    Properties:
      <<: *LambdaProxyProps
      ResourceId: !Ref ProjectMetadataEnricherResource
      HttpMethod: POST          # direct pass-through

  ProjectMetadataEnricherOptionsMethod:
    <<: *CorsOptionsMethod
    Properties:
      <<: *CorsOptionsMethod.Properties
      ResourceId: !Ref ProjectMetadataEnricherResource

###############################################################################
# 🔑  LAMBDA INVOKE PERMISSIONS  (one per URI pattern)
###############################################################################
# helper macro
Permissions: &InvokePerm
  Type: AWS::Lambda::Permission
  Properties:
    FunctionName: !Ref ProjectMetadataEnricherFunctionName
    Action: lambda:InvokeFunction
    Principal: apigateway.amazonaws.com

PMManagerAllProjectsPermission:
  <<: *InvokePerm
  Properties:
    <<: *InvokePerm.Properties
    SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/all-projects

PMManagerByEmailPermission:
  <<: *InvokePerm
  Properties:
    <<: *InvokePerm.Properties
    SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/*

ProjectsManagerPermission:
  <<: *InvokePerm
  Properties:
    <<: *InvokePerm.Properties
    SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/projects-manager

DocumentValidatorGetPermission:
  <<: *InvokePerm
  Properties:
    <<: *InvokePerm.Properties
    SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/document-validator/*

DocumentValidatorHeadPermission:
  <<: *InvokePerm
  Properties:
    <<: *InvokePerm.Properties
    SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/HEAD/document-validator/*

ProjectsAliasPermission:
  <<: *InvokePerm
  Properties:
    <<: *InvokePerm.Properties
    SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/projects

PMProjectsAllAliasPermission:
  <<: *InvokePerm
  Properties:
    <<: *InvokePerm.Properties
    SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-projects/all-projects

PMProjectsByEmailAliasPermission:
  <<: *InvokePerm
  Properties:
    <<: *InvokePerm.Properties
    SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-projects/*

ProjectMetadataEnricherPermission:
  <<: *InvokePerm
  Properties:
    <<: *InvokePerm.Properties
    SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/POST/projectMetadataEnricher

###############################################################################
# 🚀 DEPLOYMENT + STAGE
###############################################################################
ConflictFreeApiGatewayDeployment:
  Type: AWS::ApiGateway::Deployment
  DependsOn:
    # Lambda-proxy methods
    - PMManagerAllProjectsMethod
    - PMManagerByEmailMethod
    - ProjectsManagerMethod
    - DocumentValidatorGetMethod
    - DocumentValidatorHeadMethod
    - ProjectsAliasMethod
    - PMProjectsAllAliasMethod
    - PMProjectsByEmailAliasMethod
    - ProjectMetadataEnricherMethod
    # OPTIONS methods (MOCK)
    - PMManagerOptionsMethod
    - PMManagerAllProjectsOptionsMethod
    - PMManagerByEmailOptionsMethod
    - ProjectsManagerOptionsMethod
    - DocumentValidatorOptionsMethod
    - DocumentValidatorIdOptionsMethod
    - ProjectsAliasOptions
    - PMProjectsRootOptions
    - PMProjectsAllAliasOptions
    - PMProjectsByEmailAliasOptions
    - CheckDocRootAliasOptions        # included by name below
    - CheckDocAliasOptions
  Properties:
    RestApiId: !Ref ExistingApiId
    Description: !Sub "Conflict-free deployment ${DeploymentTimestamp}"

ConflictFreeProdStage:
  Type: AWS::ApiGateway::Stage
  Properties:
    RestApiId:    !Ref ExistingApiId
    DeploymentId: !Ref ConflictFreeApiGatewayDeployment
    StageName:    prod
    Description:  !Sub "Prod stage ${DeploymentTimestamp}"

###############################################################################
# 📤 OUTPUTS
###############################################################################
Outputs:
  APIGatewayId:          { Value: !Ref ExistingApiId }
  DeploymentId:          { Value: !Ref ConflictFreeApiGatewayDeployment }
  StageId:               { Value: !Ref ConflictFreeProdStage }
  ProjectsEndpoint:      { Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/projects" }
  PMProjectsEndpoint:    { Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/pm-projects/" }
  ValidatorEndpoint:     { Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/document-validator/" }
  EnricherDirectPost:    { Value: !Sub "https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/projectMetadataEnricher" }
