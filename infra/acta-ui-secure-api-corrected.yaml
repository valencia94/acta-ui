AWSTemplateFormatVersion: "2010-09-09"
Description: CORRECTED SECURE API Gateway with proper Cognito User Pool authorization and EXISTING Lambda function names

Parameters:
  ExistingApiId:
    Type: String
    Default: q2b9avfwv5
    Description: Existing API Gateway ID
  ExistingApiRootResourceId:
    Type: String
    Default: kw8f8zihjg
    Description: Existing API Gateway root resource ID
  CognitoUserPoolArn:
    Type: String
    Default: arn:aws:cognito-idp:us-east-2:703671891952:userpool/us-east-2_FyHLtOhiY
    Description: Cognito User Pool ARN for authorization

  # CORRECTED Lambda ARNs using ACTUAL AWS function names
  GetTimelineArn:
    Type: String
    Default: arn:aws:lambda:us-east-2:703671891952:function:getTimeline
    Description: EXISTING Timeline Lambda function (camelCase)
  GetDownloadActaArn:
    Type: String
    Default: arn:aws:lambda:us-east-2:703671891952:function:getDownloadActa
    Description: EXISTING Download ACTA Lambda function (camelCase)
  ProjectMetadataEnricherArn:
    Type: String
    Default: arn:aws:lambda:us-east-2:703671891952:function:projectMetadataEnricher
    Description: EXISTING Project Summary Lambda function (camelCase)
  SendApprovalEmailArn:
    Type: String
    Default: arn:aws:lambda:us-east-2:703671891952:function:sendApprovalEmail
    Description: EXISTING Send Approval Email Lambda function (camelCase)
  ProjectPlaceDataExtractorArn:
    Type: String
    Default: arn:aws:lambda:us-east-2:703671891952:function:ProjectPlaceDataExtractor
    Description: EXISTING Data Extraction Lambda function (PascalCase)
  HealthCheckArn:
    Type: String
    Default: arn:aws:lambda:us-east-2:703671891952:function:HealthCheck
    Description: EXISTING Health Check Lambda function (PascalCase)

Resources:
  # ═══════════════════════════════════════════════════════════
  # COGNITO USER POOL AUTHORIZER (CRITICAL SECURITY COMPONENT)
  # ═══════════════════════════════════════════════════════════

  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      RestApiId: !Ref ExistingApiId
      Name: ActaUICognitoAuthorizer
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !Ref CognitoUserPoolArn
      IdentitySource: method.request.header.Authorization
      AuthorizerResultTtlInSeconds: 300

  # ═══════════════════════════════════════════════════════════
  # PUBLIC ENDPOINTS (No authentication required)
  # ═══════════════════════════════════════════════════════════

  # Health Resource (PUBLIC - for monitoring)
  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: health

  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthCheckArn}/invocations

  # ═══════════════════════════════════════════════════════════
  # PROTECTED ENDPOINTS (Require Cognito authentication)
  # ═══════════════════════════════════════════════════════════

  # Timeline Resources (PROTECTED) - Button: "View Timeline"
  TimelineResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: timeline

  TimelineIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref TimelineResource
      PathPart: "{id}"

  TimelineMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref TimelineIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTimelineArn}/invocations
        TimeoutInMillis: 29000

  # Project Summary Resources (PROTECTED) - Button: "Load Project Details"
  ProjectSummaryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: project-summary

  ProjectSummaryIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ProjectSummaryResource
      PathPart: "{id}"

  ProjectSummaryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectSummaryIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations
        TimeoutInMillis: 29000

  # Download Acta Resources (PROTECTED) - Buttons: "Download PDF", "Download Word", "Preview PDF"
  DownloadActaResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: download-acta

  DownloadActaIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref DownloadActaResource
      PathPart: "{id}"

  DownloadActaMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref DownloadActaIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDownloadActaArn}/invocations

  # Extract Project Place Resources (PROTECTED) - Button: "Generate ACTA"
  ExtractProjectPlaceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: extract-project-place

  ExtractProjectPlaceIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExtractProjectPlaceResource
      PathPart: "{id}"

  ExtractProjectPlaceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ExtractProjectPlaceIdResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectPlaceDataExtractorArn}/invocations
        TimeoutInMillis: 29000

  # Send Approval Email Resource (PROTECTED) - Button: "Send for Approval"
  SendApprovalEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: send-approval-email

  SendApprovalEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref SendApprovalEmailResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendApprovalEmailArn}/invocations

  # Projects List Resource (PROTECTED) - For project management
  ProjectsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: projects

  ProjectsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectsResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  # PM Projects Resource Structure (PROTECTED) - For PM management
  PMProjectsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: pm-projects

  PMProjectsAllResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref PMProjectsResource
      PathPart: all-projects

  PMProjectsAllMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMProjectsAllResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  PMProjectsEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref PMProjectsResource
      PathPart: "{pmEmail}"

  PMProjectsEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMProjectsEmailResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  ProjectsForPMResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: projects-for-pm

  ProjectsForPMMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectsForPMResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  ProjectsForPMOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectsForPMResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels:
            application/json: Empty

  # Document Status Check Resource (PROTECTED) - For document verification
  CheckDocumentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: check-document

  CheckDocumentIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref CheckDocumentResource
      PathPart: "{projectId}"

  CheckDocumentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref CheckDocumentIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  CheckDocumentHeadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref CheckDocumentIdResource
      HttpMethod: HEAD
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProjectMetadataEnricherArn}/invocations

  # ═══════════════════════════════════════════════════════════
  # LAMBDA PERMISSIONS (CORRECTED FUNCTION NAMES)
  # ═══════════════════════════════════════════════════════════

  # Existing function permissions with CORRECT names
  HealthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: HealthCheck
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/health

  TimelinePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: getTimeline
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/timeline/*

  ProjectSummaryPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: projectMetadataEnricher
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/project-summary/*

  DownloadActaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: getDownloadActa
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/download-acta/*

  ExtractProjectPlacePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: ProjectPlaceDataExtractor
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/POST/extract-project-place/*

  SendApprovalEmailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: sendApprovalEmail
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/POST/send-approval-email

  ProjectsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: projectMetadataEnricher
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/projects

  PMProjectsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: projectMetadataEnricher
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-projects/*

  ProjectsForPmPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: projectMetadataEnricher
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/projects-for-pm

  CheckDocumentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: projectMetadataEnricher
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/*/check-document/*

  # API Gateway Deployment (IMPORTANT - triggers route updates)
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CognitoAuthorizer
      - HealthMethod
      - TimelineMethod
      - ProjectSummaryMethod
      - DownloadActaMethod
      - ExtractProjectPlaceMethod
      - SendApprovalEmailMethod
      - ProjectsMethod
      - ProjectsForPMMethod
      - ProjectsForPMOptions
      - PMProjectsAllMethod
      - PMProjectsEmailMethod
      - CheckDocumentMethod
      - CheckDocumentHeadMethod
    Properties:
      RestApiId: !Ref ExistingApiId
      Description: !Sub "CORRECTED SECURE API deployment with Cognito authorization - ${AWS::StackName}"
      StageName: prod

Outputs:
  ActaApiInvokeURL:
    Description: Base URL for invoking the secure API
    Value: !Sub https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/

  CognitoAuthorizerInfo:
    Description: Cognito User Pool Authorizer details
    Value: !Sub "Authorizer ID: ${CognitoAuthorizer}, User Pool: ${CognitoUserPoolArn}"

  SecurityStatus:
    Description: Security configuration status
    Value: "ALL endpoints now properly protected with Cognito User Pool authorization"

  PublicEndpoints:
    Description: Endpoints that remain public (no auth required)
    Value: "health"

  ProtectedEndpoints:
    Description: Endpoints that require Cognito authentication
    Value: "timeline/{id}, project-summary/{id}, download-acta/{id}, extract-project-place/{id}, send-approval-email, projects, projects-for-pm, pm-projects/*, check-document/{id}"

  AmplifyIntegrationReady:
    Description: Amplify/Cognito integration status
    Value: !Sub "Ready for Client ID: dshos5iou44tuach7ta3ici5m, CloudFront: d7t9x3j66yd8k.cloudfront.net"
