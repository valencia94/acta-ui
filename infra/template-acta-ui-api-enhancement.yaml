AWSTemplateFormatVersion: '2010-09-09'
Description: ACTA-UI API Gateway Enhancement - Add Cognito Authorization to Existing Resources

Parameters:
  ExistingApiId:
    Type: String
    Default: q2b9avfwv5
    Description: Existing API Gateway ID
  ExistingApiRootResourceId:
    Type: String
    Default: kw8f8zihjg
    Description: Existing API Gateway root resource ID
  CognitoUserPoolArn:
    Type: String
    Default: arn:aws:cognito-idp:us-east-2:703671891952:userpool/us-east-2_FyHLtOhiY
    Description: Cognito User Pool ARN for authorization

  # EXISTING RESOURCES (these already exist in API Gateway)
  ProjectsResourceId:
    Type: String
    Default: 9nmq2z
    Description: Existing /projects resource ID
  PMManagerResourceId:
    Type: String
    Default: 9ufbqd
    Description: Existing /pm-manager resource ID
  PMManagerAllResourceId:
    Type: String
    Default: u8hucp
    Description: Existing /pm-manager/all-projects resource ID
  PMManagerEmailResourceId:
    Type: String
    Default: cltt9f
    Description: Existing /pm-manager/{pmEmail} resource ID
  ApproveResourceId:
    Type: String
    Default: bu2yiu
    Description: Existing /approve resource ID
  ProjectPlaceDataExtractorResourceId:
    Type: String
    Default: prgbfe
    Description: Existing /ProjectPlaceDataExtractor resource ID

Resources:
  # ===============================================================================
  # COGNITO USER POOL AUTHORIZER (CRITICAL SECURITY COMPONENT)
  # ===============================================================================

  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      RestApiId: !Ref ExistingApiId
      Name: ActaUiCognitoAuthorizer
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !Ref CognitoUserPoolArn
      IdentitySource: method.request.header.Authorization
      AuthorizerResultTtlInSeconds: 300

  # ===============================================================================
  # NEW RESOURCES (these don't exist yet)
  # ===============================================================================

  # Health Resource (PUBLIC - for monitoring)
  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: health

  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:HealthCheck/invocations

  # Timeline Resources (PROTECTED)
  TimelineResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: timeline

  TimelineIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref TimelineResource
      PathPart: '{id}'

  TimelineMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref TimelineIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:getTimeline/invocations
        TimeoutInMillis: 29000

  # Project Summary Resources (PROTECTED)
  ProjectSummaryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: project-summary

  ProjectSummaryIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ProjectSummaryResource
      PathPart: '{id}'

  ProjectSummaryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectSummaryIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:projectMetadataEnricher/invocations
        TimeoutInMillis: 29000

  # Download Acta Resources (PROTECTED)
  DownloadActaResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: download-acta

  DownloadActaIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref DownloadActaResource
      PathPart: '{id}'

  DownloadActaMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref DownloadActaIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:getDownloadActa/invocations

  # Extract Project Place Resources (PROTECTED) - using different path since /ProjectPlaceDataExtractor exists
  ExtractProjectPlaceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: extract-project-place

  ExtractProjectPlaceIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExtractProjectPlaceResource
      PathPart: '{id}'

  ExtractProjectPlaceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ExtractProjectPlaceIdResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:ProjectPlaceDataExtractor/invocations
        TimeoutInMillis: 29000

  # Send Approval Email Resource (PROTECTED)
  SendApprovalEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: send-approval-email

  SendApprovalEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref SendApprovalEmailResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:sendApprovalEmail/invocations

  # Document Status Check Resource (PROTECTED)
  CheckDocumentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref ExistingApiRootResourceId
      PathPart: check-document

  CheckDocumentIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref CheckDocumentResource
      PathPart: '{projectId}'

  CheckDocumentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref CheckDocumentIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:DocumentStatus/invocations

  CheckDocumentHeadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref CheckDocumentIdResource
      HttpMethod: HEAD
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:DocumentStatus/invocations

  # ===============================================================================
  # ENHANCE EXISTING RESOURCES WITH COGNITO AUTHORIZATION
  # ===============================================================================

  # Add GET method to existing /projects resource
  ProjectsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref ProjectsResourceId
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:projectMetadataEnricher/invocations

  # Update existing /pm-manager/all-projects method to use Cognito auth
  PMManagerAllMethodUpdate:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMManagerAllResourceId
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:projectMetadataEnricher/invocations

  # Update existing /pm-manager/{pmEmail} method to use Cognito auth
  PMManagerEmailMethodUpdate:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref PMManagerEmailResourceId
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:703671891952:function:projectMetadataEnricher/invocations

  # ===============================================================================
  # LAMBDA PERMISSIONS
  # ===============================================================================

  HealthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: HealthCheck
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/health

  TimelinePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: getTimeline
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/timeline/*

  ProjectSummaryPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: projectMetadataEnricher
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/project-summary/*

  DownloadActaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: getDownloadActa
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/download-acta/*

  ExtractProjectPlacePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: ProjectPlaceDataExtractor
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/POST/extract-project-place/*

  SendApprovalEmailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: sendApprovalEmail
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/POST/send-approval-email

  DocumentStatusPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: DocumentStatus
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/*/check-document/*

  ProjectsManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: projectMetadataEnricher
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/projects

  PMManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: projectMetadataEnricher
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*/GET/pm-manager/*

  # ===============================================================================
  # API GATEWAY DEPLOYMENT
  # ===============================================================================

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CognitoAuthorizer
      - HealthMethod
      - TimelineMethod
      - ProjectSummaryMethod
      - DownloadActaMethod
      - ExtractProjectPlaceMethod
      - SendApprovalEmailMethod
      - CheckDocumentMethod
      - CheckDocumentHeadMethod
      - ProjectsGetMethod
      - PMManagerAllMethodUpdate
      - PMManagerEmailMethodUpdate
    Properties:
      RestApiId: !Ref ExistingApiId
      Description: !Sub 'ACTA-UI Enhanced API deployment with Cognito authorization - ${AWS::StackName}'
      StageName: prod

Outputs:
  ActaApiInvokeURL:
    Description: Base URL for invoking the enhanced API
    Value: !Sub https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/

  CognitoAuthorizerInfo:
    Description: Cognito User Pool Authorizer details
    Value: !Sub 'Authorizer ID: ${CognitoAuthorizer}, User Pool: ${CognitoUserPoolArn}'

  SecurityStatus:
    Description: Security configuration status
    Value: 'ALL endpoints now properly protected with Cognito User Pool authorization'

  NewEndpoints:
    Description: New endpoints added for button functionality
    Value: 'health, timeline/{id}, project-summary/{id}, download-acta/{id}, extract-project-place/{id}, send-approval-email, check-document/{id}'

  EnhancedExistingEndpoints:
    Description: Existing endpoints enhanced with Cognito auth
    Value: 'projects, pm-manager/all-projects, pm-manager/{pmEmail}'
